// Generated by webpack
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Root component of the React Sandbox.
	 */

	// TODO(jlfwong):
	//  - PropType introspection
	//  - Prop editing
	//  - Prop generation
	//  - Autocomplete component selection
	//  - Speed up JS package compilation...?
	//  - Resizable prop editor
	//  - Generate code
	//  - Tests

	"use strict";

	var React = __webpack_require__(2);

	var _require = __webpack_require__(3);

	var Provider = _require.Provider;

	var _require2 = __webpack_require__(4);

	var StyleSheet = _require2.StyleSheet;
	var css = _require2.css;

	var PropTypeTools = __webpack_require__(5);
	var EditorModalContainer = __webpack_require__(6);
	var SandboxDisplayContainer = __webpack_require__(11);
	var actions = __webpack_require__(9);
	var createSandboxStore = __webpack_require__(20);

	var RP = React.PropTypes;

	var patchReactWithFakeErrorBoundaries = function patchReactWithFakeErrorBoundaries() {
	    // We patch React.createClass as a temporary work around for the
	    // lack of error boundaries. When React 15 lands, we can delete this
	    // and use real error boundaries.
	    if (React.__patchedBySandboxForFakeErrorBoundaries) {
	        return;
	    }
	    React.__patchedBySandboxForFakeErrorBoundaries = true;

	    var origCreateClass = React.createClass;
	    React.createClass = function () {
	        var clazz = origCreateClass.apply(undefined, arguments);

	        var render = clazz.prototype.render;

	        clazz.prototype.render = function () {
	            try {
	                return render.call(this);
	            } catch (e) {
	                return React.createElement(
	                    "pre",
	                    { className: css(styles.errorBox) },
	                    e.stack
	                );
	            }
	        };

	        return clazz;
	    };

	    var styles = StyleSheet.create({
	        errorBox: {
	            background: 'red',
	            color: 'black',
	            whiteSpace: 'pre',
	            textAlign: 'left'
	        }
	    });
	};

	var Sandbox = React.createClass({
	    displayName: "Sandbox",

	    propTypes: {
	        // Returns a list of [label, key] pairs, one per component loadable in
	        // the sandbox.
	        //
	        // "label" will be what you'd like to have displayed in the dropdown.
	        // "key" will be passed to getComponentReference to load the associated
	        // comopnent. Could be e.g. the path to the component. Will not be
	        // displayed to the user.
	        getComponentList: RP.func.isRequired,

	        // Given a "key" as specified in getComponentList, return a promise
	        // resolving to a JS reference to the React component constructor.
	        //
	        // Calling this should reload the file containing the definition of the
	        // component. This allows the Sandbox to monkey patch React before
	        // React.PropTypes is referenced in the React component definition.
	        //
	        // e.g. in webpack, this should be something roughly like:
	        //
	        //  delete require.cache[require.resolve(pathToComponent)];
	        //  return require(pathToComponent);
	        getComponentReference: RP.func.isRequired,

	        // Given a "key" as specified in getComponentList, return a promise
	        // resolving to a JS reference to a list of fixtures. See
	        // SandboxDisplay.PropTypes for the structure of fixtures.
	        getFixtureListReference: RP.func,

	        // URL root of the React sandbox. If specified, will use client-side
	        // routing to allow specifying the component to view. Should include
	        // the leading slash but not a trailing slash, e.g. "/react-sandbox".
	        urlRoot: RP.string

	    },

	    // saveFixtureList: RP.func,
	    componentWillMount: function componentWillMount() {
	        this.store = createSandboxStore();
	        PropTypeTools.patch(RP);

	        patchReactWithFakeErrorBoundaries();
	    },

	    componentDidMount: function componentDidMount() {
	        var _this = this;

	        var _props = this.props;
	        var getComponentList = _props.getComponentList;
	        var getComponentReference = _props.getComponentReference;
	        var getFixtureListReference = _props.getFixtureListReference;
	        var urlRoot = _props.urlRoot;

	        this.store.dispatch(actions.loadComponentList(getComponentList));

	        if (urlRoot) {
	            // TODO(jlfwong): If this needs to get more complicated than this,
	            // should probably pull in a real routing library.

	            if (window.location.pathname.indexOf(urlRoot + "/") === 0) {
	                var componentKey = window.location.pathname.substr((urlRoot + "/").length);
	                if (componentKey.length > 0) {
	                    this.store.dispatch(actions.selectComponent(componentKey, getComponentReference, getFixtureListReference));
	                }
	            }

	            // TODO(jlfwong): Deal with popstate, then switch the below to
	            // pushState

	            // Update the URL when the selected component changes
	            this.store.subscribe(function () {
	                var _store$getState = _this.store.getState();

	                var selectedComponent = _store$getState.selectedComponent;

	                if (selectedComponent) {
	                    window.history.replaceState({}, window.title, urlRoot + "/" + selectedComponent.key);
	                } else {
	                    window.history.replaceState({}, window.title, urlRoot);
	                }
	            });
	        }
	    },

	    render: function render() {
	        var _props2 = this.props;
	        var getComponentReference = _props2.getComponentReference;
	        var getFixtureListReference = _props2.getFixtureListReference;

	        return React.createElement(
	            Provider,
	            { store: this.store },
	            React.createElement(
	                "div",
	                null,
	                React.createElement(EditorModalContainer, null),
	                React.createElement(SandboxDisplayContainer, {
	                    getComponentReference: getComponentReference,
	                    getFixtureListReference: getFixtureListReference,
	                    generator: PropTypeTools.generateRandomValueForType
	                })
	            )
	        );
	    }
	});

	module.exports = Sandbox;

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = require("react");

/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports = require("react-redux");

/***/ },
/* 4 */
/***/ function(module, exports) {

	module.exports = require("aphrodite");

/***/ },
/* 5 */
/***/ function(module, exports) {

	/**
	 * In order to reflect upon a components prop types, we need to patch them.
	 *
	 * This is necessary because, while React.PropTypes does validation, it does so
	 * only as a function from input to a boolean. Trying to figure out from the
	 * PropTypes what the full range of valid values is is much harder! So we
	 * monkey patch it to retain information about the types.
	 */

	'use strict';

	var patch = function patch(PropTypes) {
	    if (PropTypes.__isPatchedBySandbox) {
	        return;
	    }

	    Object.keys(PropTypes).forEach(function (key) {
	        var orig = PropTypes[key];

	        // If the PropType has a .isRequired property it means that this prop
	        // type is a validator function itself, like PropTypes.string. If not,
	        // it means it's a validator function constructor, like PropTypes.shape
	        // (PropTypes.shape({...}) becomes the validator function).
	        if (orig.isRequired != null) {
	            orig.__sandbox_meta = {
	                type: key,
	                required: false
	            };
	            orig.isRequired.__sandbox_meta = {
	                type: key,
	                required: true
	            };
	        } else {
	            PropTypes[key] = function () {
	                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	                    args[_key] = arguments[_key];
	                }

	                var ret = orig.apply(undefined, args);
	                ret.__sandbox_meta = {
	                    type: key,
	                    required: false,
	                    args: args
	                };
	                ret.isRequired.__sandbox_meta = {
	                    type: key,
	                    required: true,
	                    args: args
	                };
	                return ret;
	            };
	        }
	    });

	    PropTypes.__isPatchedBySandbox = true;
	};

	var inferType = function inferType(propType) {
	    if (propType.__sandbox_meta != null) {
	        var _propType$__sandbox_meta = propType.__sandbox_meta;
	        var type = _propType$__sandbox_meta.type;
	        var required = _propType$__sandbox_meta.required;
	        var args = _propType$__sandbox_meta.args;

	        if (args != null) {
	            return {
	                type: type,
	                required: required,
	                args: args.map(inferType),
	                __propType: propType
	            };
	        } else {
	            return {
	                type: type,
	                required: required,
	                __propType: propType
	            };
	        }
	    } else if (Array.isArray(propType)) {
	        return propType.map(inferType);
	    } else if (typeof propType === 'object') {
	        var _ret = (function () {
	            var ret = {};
	            Object.keys(propType).forEach(function (key) {
	                ret[key] = inferType(propType[key]);
	            });
	            return {
	                v: ret
	            };
	        })();

	        if (typeof _ret === 'object') return _ret.v;
	    } else {
	        return propType;
	    }
	};

	/**
	 * Given a refernece to a component, return a description of the proptypes it
	 * expects.
	 */
	var inferTypesForComponent = function inferTypesForComponent(Component) {
	    var ret = {};

	    var propTypes = Component.propTypes || {};

	    Object.keys(propTypes).forEach(function (propName) {
	        ret[propName] = inferType(propTypes[propName]);
	    });

	    return ret;
	};

	/**
	 * Given a value and a type as returned by inferType, return true if the value
	 * satisfies the type.
	 */
	var valueSatisfiesType = function valueSatisfiesType(value, inferredType) {
	    var propType = typeof inferredType === 'function' ? inferredType : inferredType.__propType;

	    var maybeError = propType({ __ignored__: value }, '__ignored__', '__ignore__', 'prop');

	    return !(maybeError instanceof Error);
	};

	var configDefaults = {
	    generateString: function generateString() {
	        return '';
	    },
	    generateNumber: function generateNumber() {
	        return 0;
	    },
	    generateBool: function generateBool() {
	        return false;
	    },
	    chooseItemFromList: function chooseItemFromList(list) {
	        return list && list[0];
	    },
	    chooseListLength: function chooseListLength() {
	        return 1;
	    },
	    nullProbability: 1.0
	};

	var _generateValue = function _generateValue(inferredType, path, config) {
	    var generatorType = 'unknown';
	    var required = true;

	    if (inferredType && inferredType.type) {
	        required = !!inferredType.required;

	        if (generators.hasOwnProperty(inferredType.type)) {
	            generatorType = inferredType.type;
	        }
	    }

	    if (!required && Math.random() < config.nullProbability) {
	        return null;
	    }

	    return generators[generatorType](path, function (t, path) {
	        return _generateValue(t, path, config);
	    }, inferredType, config);
	};

	/**
	 * Given an inferred type and an optional configuration object, return a value
	 * satisfying that type.
	 */
	var generateValueForType = function generateValueForType(inferredType) {
	    var path = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
	    var config = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	    var fullConfig = {};
	    Object.assign(fullConfig, configDefaults, config);
	    return _generateValue(inferredType, path, fullConfig);
	};

	// Generators all have the signature
	//
	//      (path, isRequired, generator, inferredType) => value
	//
	// Additional arguments are used in some to allow re-use by other generators.
	var generators = {
	    string: function string(path, generator, inferredType, config) {
	        return config.generateString(path);
	    },
	    number: function number(path, generator, inferredType, config) {
	        return config.generateNumber(path);
	    },
	    bool: function bool(path, generator, inferredType, config) {
	        return config.generateBool(path);
	    },
	    array: function array(path) {
	        return [];
	    },
	    object: function object(path) {
	        return {};
	    },
	    arrayOf: function arrayOf(path, generator, inferredType, config) {
	        var ret = [];
	        var length = config.chooseListLength();
	        for (var i = 0; i < length; i++) {
	            ret.push(generator(inferredType.args[0], path.concat([i])));
	        }
	        return ret;
	    },
	    objectOf: function objectOf(path, generator, inferredType, config) {
	        // TODO(jlfwong): Maybe try to generate here? Not clear how frequently
	        // this will be useful.
	        return {};
	    },
	    shape: function shape(path, generator, inferredType) {
	        var ret = {};
	        var shapeTypes = inferredType.args[0];
	        for (var key in shapeTypes) {
	            if (!shapeTypes.hasOwnProperty(key)) {
	                continue;
	            }
	            ret[key] = generator(shapeTypes[key], path.concat([key]));
	        }
	        return ret;
	    },
	    unknown: function unknown(path, generator, inferredType, config) {
	        return null;
	    },
	    any: function any() {
	        return generators.string.apply(generators, arguments);
	    },
	    node: function node() {
	        return generators.string.apply(generators, arguments);
	    },
	    element: function element() {
	        return generators.string.apply(generators, arguments);
	    },
	    oneOf: function oneOf(path, generator, inferredType, config) {
	        return config.chooseItemFromList(inferredType.args[0]);
	    },
	    oneOfType: function oneOfType(path, generator, inferredType, config) {
	        var chosenType = config.chooseItemFromList(inferredType.args[0]);
	        return generator(chosenType, path);
	    },
	    func: function func(path, generator, inferredType, config) {
	        return function () {};
	    }
	};

	var randomChoice = function randomChoice(list) {
	    return list[Math.floor(Math.random() * list.length)];
	};

	var randomConfig = {
	    generateString: function generateString(path) {
	        if (path.length > 0) {
	            var _name = ('' + path[path.length - 1]).toLowerCase();
	            if (_name.indexOf('color') !== -1) {
	                return randomChoice(['red', 'green', 'blue']);
	            } else if (_name.indexOf('url') !== -1) {
	                return randomChoice(['http://lorempixel.com/800/500/city/', 'http://lorempixel.com/800/500/cats/', 'http://lorempixel.com/800/500/nature/']);
	            } else if (_name.indexOf('href') !== -1) {
	                return randomChoice(['https://www.khanacademy.org', 'https://google.com']);
	            }
	        }
	        return [randomChoice(ADJECTIVES_1), randomChoice(ADJECTIVES_2), randomChoice(ANIMALS)].join(' ');
	    },
	    generateNumber: function generateNumber() {
	        return Math.floor(Math.random() * 50 + 20);
	    },
	    generateBool: function generateBool() {
	        return Math.random() < 0.5;
	    },
	    chooseItemFromList: function chooseItemFromList(list) {
	        return randomChoice(list);
	    },
	    chooseListLength: function chooseListLength() {
	        return Math.floor(Math.random() * 4) + 2;
	    },
	    nullProbability: 0.0
	};

	// TODO(jlfwong): Reorganize this to avoid the Object.assign
	// call on every value generation.
	var generateRandomValueForType = function generateRandomValueForType(inferredType) {
	    var path = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

	    return generateValueForType(inferredType, path, randomConfig);
	};

	var ADJECTIVES_1 = ['Agreeable', 'Brave', 'Calm', 'Delightful', 'Eager', 'Faithful', 'Gentle', 'Happy', 'Jolly', 'Kind', 'Lively', 'Nice', 'Obedient', 'Proud', 'Relieved', 'Silly', 'Thankful', 'Victorious', 'Witty', 'Zealous'];

	var ADJECTIVES_2 = ['Cooing', 'Deafening', 'Faint', 'Hissing', 'Loud', 'Melodic', 'Noisy', 'Purring', 'Quiet', 'Raspy', 'Screeching', 'Thundering', 'Voiceless', 'Whispering'];

	var ANIMALS = ["Leafy seadragon", "Sun Bear", "Komondor Dog", "Angora Rabbit", "Red Panda", "Sloth", "Emperor Tamarin", "White-faced Saki Monkey", "Tapir", "Hagfish", "Star-nosed Mole", "Proboscis Monkey", "Pink Fairy Armadillo", "Axolotl", "Aye-aye", "Alpaca", "Tarsier", "Dumbo Octopus", "Frill-necked Lizard", "Narwhal", "Sucker-footed Bat", "Pygmy Marmoset", "Blobfish", "Platypus", "Shoebill", "Yeti Crab"];

	module.exports = {
	    patch: patch,
	    inferType: inferType,
	    inferTypesForComponent: inferTypesForComponent,
	    valueSatisfiesType: valueSatisfiesType,
	    generateValueForType: generateValueForType,
	    generateRandomValueForType: generateRandomValueForType
	};

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _require = __webpack_require__(3);

	var connect = _require.connect;

	var icepick = __webpack_require__(7);

	var EditorModal = __webpack_require__(8);
	var actions = __webpack_require__(9);

	/**
	 * Connects EditorModal to the redux store.
	 */

	var mapStateToProps = function mapStateToProps(state) {
	    return {
	        cursor: state.modalEditorCursor,
	        initialValue: icepick.getIn(state.selectedComponent, ['fixtures', 'instances'].concat(state.modalEditorCursor))
	    };
	};

	var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	    return {
	        onSave: function onSave() {
	            dispatch(actions.updateFixture.apply(actions, arguments));
	        },
	        onClose: function onClose() {
	            dispatch(actions.closeModal());
	        }
	    };
	};

	module.exports = connect(mapStateToProps, mapDispatchToProps)(EditorModal);

/***/ },
/* 7 */
/***/ function(module, exports) {

	module.exports = require("icepick");

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var React = __webpack_require__(2);
	var Modal = __webpack_require__(33);

	var _require = __webpack_require__(4);

	var StyleSheet = _require.StyleSheet;
	var css = _require.css;

	var serializeToJS = __webpack_require__(18);

	var RP = React.PropTypes;

	// TODO(jlfwong): Use this other places we need cursors
	var cursorPropType = RP.arrayOf(RP.oneOfType([RP.string.isRequired, RP.number.isRequired]).isRequired);

	var EditorModal = React.createClass({
	    displayName: "EditorModal",

	    propTypes: {
	        // Cursor of data to edit. If omitted, the modal will not be displayed.
	        cursor: cursorPropType,

	        onSave: RP.func.isRequired,

	        onClose: RP.func.isRequired,

	        initialValue: RP.any
	    },

	    handleSave: function handleSave() {
	        var _props = this.props;
	        var cursor = _props.cursor;
	        var onSave = _props.onSave;
	        var onClose = _props.onClose;

	        var value = this._textarea.value;

	        try {
	            // Wrap the value in parens before eval to force functions to be
	            // treated as functions expressions instead of function
	            // definitions.
	            var newJsVal = eval("(" + value + ")");
	            onSave(cursor, newJsVal);
	            onClose();
	        } catch (e) {
	            alert(e);

	            // Rethrow for stack trace in console
	            throw e;
	        }
	    },

	    componentDidUpdate: function componentDidUpdate(prevProps) {
	        var _this = this;

	        if (!prevProps.cursor && this.props.cursor) {
	            setTimeout(function () {
	                _this._textarea.select();
	            }, 0);
	        }
	    },

	    render: function render() {
	        var _this2 = this;

	        var _props2 = this.props;
	        var cursor = _props2.cursor;
	        var onClose = _props2.onClose;
	        var initialValue = _props2.initialValue;

	        return React.createElement(
	            Modal,
	            {
	                isOpen: !!cursor,
	                onRequestClose: onClose
	            },
	            React.createElement(
	                "h1",
	                null,
	                "Editing Field ",
	                cursor && cursor.join('.')
	            ),
	            React.createElement(
	                "div",
	                null,
	                "The field below will be evaluated as a JavaScript expression when you hit save."
	            ),
	            React.createElement("textarea", {
	                defaultValue: initialValue && serializeToJS(initialValue),
	                onChange: this.handleChange,
	                className: css(styles.editorTextArea),
	                ref: function (el) {
	                    _this2._textarea = el;
	                }
	            }),
	            React.createElement(
	                "button",
	                { onClick: this.handleSave },
	                "Save"
	            ),
	            React.createElement(
	                "button",
	                { onClick: onClose },
	                "Cancel"
	            )
	        );
	    }
	});

	var styles = StyleSheet.create({
	    editorTextArea: {
	        display: 'block',
	        width: '100%',
	        height: 300
	    }
	});

	module.exports = EditorModal;

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Redux actions used by sandbox.
	 */

	"use strict";

	var constants = __webpack_require__(10);

	/**
	 * Load the list of all React components available for use in the sandbox.
	 */
	var loadComponentList = function loadComponentList(getComponentList) {
	    return function (dispatch, getState) {
	        dispatch({
	            type: constants.COMPONENT_LIST_WILL_LOAD
	        });

	        getComponentList().then(function (components) {
	            dispatch({
	                type: constants.COMPONENT_LIST_DID_LOAD,
	                components: components
	            });
	        });
	    };
	};

	/**
	 * Select a component to view in the sandbox.
	 */
	var selectComponent = function selectComponent(key, getComponentReference, getFixtureListReference) {

	    return function (dispatch, getState) {
	        dispatch({
	            type: constants.COMPONENT_SELECTED,
	            key: key
	        });

	        getComponentReference(key).then(function (reference) {
	            dispatch({
	                type: constants.COMPONENT_REFERENCE_DID_LOAD,
	                key: key,
	                reference: reference
	            });
	        });

	        getFixtureListReference(key).then(function (fixtures) {
	            dispatch({
	                type: constants.FIXTURES_DID_LOAD,
	                key: key,
	                fixtures: fixtures
	            });
	        });
	    };
	};

	/**
	 * Update the values of a fixture for the currently selected component.
	 */
	var updateFixture = function updateFixture(cursor, newValue) {
	    return {
	        type: constants.UPDATE_FIXTURE,
	        cursor: cursor,
	        newValue: newValue
	    };
	};

	/**
	 * Update the values of a fixture for the currently selected component.
	 */
	var addFixture = function addFixture(props) {
	    return {
	        type: constants.ADD_FIXTURE,
	        props: props
	    };
	};

	/**
	 * Open the modal to edit a fixture field at the given cursor.
	 */
	var openModal = function openModal(cursor) {
	    return {
	        type: constants.OPEN_MODAL,
	        cursor: cursor
	    };
	};

	/**
	 * Close the modal.
	 */
	var closeModal = function closeModal() {
	    return {
	        type: constants.CLOSE_MODAL
	    };
	};

	module.exports = {
	    loadComponentList: loadComponentList,
	    selectComponent: selectComponent,
	    updateFixture: updateFixture,
	    addFixture: addFixture,
	    openModal: openModal,
	    closeModal: closeModal
	};

/***/ },
/* 10 */
/***/ function(module, exports) {

	/**
	 * Redux constants used by the sandbox.
	 */

	// Automatically make SANDBOX. prefixed string constants out of an object of
	// names.
	"use strict";

	function makeConstants(obj) {
	    var constants = {};

	    Object.keys(obj).forEach(function (k) {
	        constants[k] = "SANDBOX." + k;
	    });

	    return constants;
	}

	module.exports = makeConstants({
	    COMPONENT_LIST_WILL_LOAD: null,
	    COMPONENT_LIST_DID_LOAD: null,
	    COMPONENT_SELECTED: null,
	    COMPONENT_REFERENCE_DID_LOAD: null,
	    FIXTURES_DID_LOAD: null,
	    UPDATE_FIXTURE: null,
	    ADD_FIXTURE: null,
	    OPEN_MODAL: null,
	    CLOSE_MODAL: null
	});

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _require = __webpack_require__(3);

	var connect = _require.connect;

	var SandboxDisplay = __webpack_require__(12);
	var actions = __webpack_require__(9);

	/**
	 * Connects SandboxDisplay to the redux store.
	 */

	var mapStateToProps = function mapStateToProps(state) {
	    return {
	        componentList: state.componentList,
	        selectedComponent: state.selectedComponent
	    };
	};

	var mapDispatchToProps = function mapDispatchToProps(dispatch, ownProps) {
	    return {
	        onComponentSelect: function onComponentSelect(key) {
	            dispatch(actions.selectComponent(key, ownProps.getComponentReference, ownProps.getFixtureListReference));
	        },

	        onFixtureUpdate: function onFixtureUpdate() {
	            dispatch(actions.updateFixture.apply(actions, arguments));
	        },

	        onFixtureAdd: function onFixtureAdd() {
	            dispatch(actions.addFixture.apply(actions, arguments));
	        },

	        onRequestEdit: function onRequestEdit(cursor) {
	            dispatch(actions.openModal(cursor));
	        }
	    };
	};

	module.exports = connect(mapStateToProps, mapDispatchToProps)(SandboxDisplay);

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Stateless component for displaying things in the react sandbox.
	 */

	"use strict";

	var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

	var React = __webpack_require__(2);

	var _require = __webpack_require__(4);

	var StyleSheet = _require.StyleSheet;
	var css = _require.css;

	var SandboxInstance = __webpack_require__(13);
	var serializeToJS = __webpack_require__(18);

	var RP = React.PropTypes;

	var emptyList = Object.freeze([]);

	var generateProps = function generateProps(types, valueGenerator) {
	    var ret = {};
	    for (var key in types) {
	        if (!types.hasOwnProperty(key)) {
	            continue;
	        }

	        ret[key] = valueGenerator(types[key], [key]);
	    }
	    return ret;
	};

	var SandboxDisplay = React.createClass({
	    displayName: "SandboxDisplay",

	    propTypes: {
	        // A list of [label, key] pairs, one per component loadable in the
	        // sandbox.
	        componentList: RP.arrayOf(RP.arrayOf(RP.string.isRequired).isRequired),

	        // Generator function returning a value given a type and name of the
	        // prop.
	        generator: RP.func.isRequired,

	        // Called with the key of the component to select
	        onComponentSelect: RP.func.isRequired,

	        // Called with the new prop values to create a fixture with.
	        onFixtureAdd: RP.func.isRequired,

	        // Called with the path and prop values of the fixture to update.
	        onFixtureUpdate: RP.func.isRequired,

	        // Called with the cursor to the prop to edit.
	        onRequestEdit: RP.func.isRequired,

	        selectedComponent: RP.shape({
	            // A key identifying the currently selected component
	            key: RP.string.isRequired,

	            // A reference to the currently selected component
	            reference: RP.func,

	            // The inferred types of the props of the selected component
	            types: RP.object,

	            // A list of instances of props to pass to the component
	            fixtures: RP.shape({
	                instances: RP.arrayOf(RP.object.isRequired).isRequired,
	                log: RP.arrayOf(RP.string.isRequired)
	            })
	        })

	    },

	    handleFixtureAdd: function handleFixtureAdd() {
	        var _props = this.props;
	        var selectedComponent = _props.selectedComponent;
	        var generator = _props.generator;
	        var onFixtureAdd = _props.onFixtureAdd;

	        onFixtureAdd(generateProps(selectedComponent.types, generator));
	    },

	    render: function render() {
	        var _this = this;

	        // TODO(jlfwong): Adding entire new fixtures

	        var _props2 = this.props;
	        var componentList = _props2.componentList;
	        var selectedComponent = _props2.selectedComponent;
	        var onComponentSelect = _props2.onComponentSelect;
	        var onFixtureUpdate = _props2.onFixtureUpdate;
	        var onRequestEdit = _props2.onRequestEdit;

	        if (!componentList) {
	            // TODO(jlfwong): Nicer loading indicator
	            return React.createElement(
	                "div",
	                null,
	                "Loading..."
	            );
	        }

	        // TODO(jlfwong): Refactor this into a getContent() method to leverage
	        // early-returns
	        var content = "";

	        if (selectedComponent) {
	            if (!selectedComponent.reference) {
	                content = "Loading " + selectedComponent.key + "...";
	            } else {
	                (function () {
	                    var name = selectedComponent.reference.displayName;
	                    var fixtures = selectedComponent.fixtures;

	                    if (fixtures == null) {
	                        content = "Loading fixtures for " + name + "...";
	                    } else {
	                        content = React.createElement(
	                            "div",
	                            null,
	                            React.createElement(
	                                "h1",
	                                null,
	                                name
	                            ),
	                            fixtures.instances.length > 0 ? fixtures.instances.map(function (props, i) {
	                                return React.createElement(SandboxInstance, {
	                                    key: i,
	                                    cursor: [i],
	                                    component: selectedComponent.reference,
	                                    props: props,
	                                    types: selectedComponent.types,
	                                    callbacksToLog: fixtures.log || emptyList,
	                                    onFixtureUpdate: onFixtureUpdate,
	                                    onRequestEdit: onRequestEdit
	                                });
	                            }) : "No fixtures for this component yet. Add some!",
	                            React.createElement(
	                                "div",
	                                { className: css(styles.addButtonContainer) },
	                                React.createElement(
	                                    "button",
	                                    { onClick: _this.handleFixtureAdd },
	                                    "Add new fixture"
	                                )
	                            ),
	                            React.createElement("textarea", {
	                                className: css(styles.textarea),
	                                readOnly: true,
	                                value: serializeToJS(fixtures)
	                            })
	                        );
	                    }
	                })();
	            }
	        }

	        return React.createElement(
	            "div",
	            { className: css(styles.root) },
	            React.createElement(
	                "select",
	                {
	                    value: selectedComponent && selectedComponent.key,
	                    onChange: function (ev) {
	                        return onComponentSelect(ev.target.value);
	                    }
	                },
	                componentList.map(function (_ref) {
	                    var _ref2 = _slicedToArray(_ref, 2);

	                    var label = _ref2[0];
	                    var key = _ref2[1];

	                    return React.createElement(
	                        "option",
	                        { value: key, key: key },
	                        label
	                    );
	                })
	            ),
	            React.createElement(
	                "div",
	                null,
	                content
	            )
	        );
	    }
	});

	var styles = StyleSheet.create({
	    root: {
	        textAlign: 'center',
	        padding: 20
	    },
	    addButtonContainer: {
	        borderTop: '1px dotted black'
	    },
	    textarea: {
	        display: 'block',
	        width: '100%',
	        height: 300
	    }
	});

	module.exports = SandboxDisplay;
	/* TODO(jlfwong): Switch this to autocomplete */

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/*eslint-disable react/forbid-prop-types, no-console*/

	/**
	 * Component to render a single instance of a component using fixture data.
	 */

	"use strict";

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(2);

	var _require = __webpack_require__(4);

	var StyleSheet = _require.StyleSheet;
	var css = _require.css;

	var PropEditor = __webpack_require__(14);
	var PureRenderMixinWithCursor = __webpack_require__(17);

	var RP = React.PropTypes;

	var getInvalidProps = function getInvalidProps(component, props) {
	    var propTypes = component.propTypes;
	    var componentName = component.displayName;

	    var errors = [];

	    for (var propName in propTypes) {
	        if (!propTypes.hasOwnProperty(propName)) {
	            continue;
	        }
	        var error = propTypes[propName](props, propName, componentName, 'prop');
	        if (error instanceof Error) {
	            errors.push(error);
	        }
	    }
	    return errors;
	};

	var SandboxInstance = React.createClass({
	    displayName: "SandboxInstance",

	    propTypes: {
	        // The props taking function values to respond to by logging to the
	        // console.
	        callbacksToLog: RP.arrayOf(RP.string.isRequired).isRequired,

	        // The Component class to render
	        component: RP.func.isRequired,

	        // Cursor to the data this binds to in the fixtures. To be treated as
	        // opaque.
	        cursor: RP.arrayOf(RP.oneOfType([RP.string.isRequired, RP.number.isRequired]).isRequired).isRequired,

	        // Called with the new prop values on update
	        onFixtureUpdate: RP.func.isRequired,

	        // Called with the cursor to the prop to edit.
	        onRequestEdit: RP.func.isRequired,

	        // The props for the component
	        props: RP.object.isRequired,

	        types: PropEditor.propTypes.types
	    },

	    mixins: [PureRenderMixinWithCursor],

	    render: function render() {
	        var _props = this.props;
	        var component = _props.component;
	        var props = _props.props;
	        var callbacksToLog = _props.callbacksToLog;
	        var onFixtureUpdate = _props.onFixtureUpdate;
	        var onRequestEdit = _props.onRequestEdit;
	        var cursor = _props.cursor;
	        var types = _props.types;

	        var propsToPass = _extends({}, props);

	        callbacksToLog.forEach(function (propToLog) {
	            propsToPass[propToLog] = function () {
	                console.log(propToLog, arguments);
	            };
	        });

	        var propErrors = getInvalidProps(component, propsToPass);

	        var Component = component;

	        return React.createElement(
	            "div",
	            { className: css(styles.container) },
	            React.createElement(
	                "div",
	                { className: css(styles.propEditorWrapper) },
	                React.createElement(PropEditor, {
	                    component: component,
	                    componentProps: propsToPass,
	                    onChange: onFixtureUpdate,
	                    onRequestEdit: onRequestEdit,
	                    cursor: cursor,
	                    types: types
	                })
	            ),
	            React.createElement(
	                "div",
	                { className: css(styles.componentTableWrapper) },
	                propErrors.length > 0 ? React.createElement(
	                    "pre",
	                    { className: css(styles.errorBox) },
	                    propErrors.map(function (er) {
	                        return er.toString();
	                    }).join('\n')
	                ) : React.createElement(Component, propsToPass)
	            )
	        );
	    }
	});

	var styles = StyleSheet.create({
	    container: {
	        display: 'flex',
	        borderTop: '1px dotted black'
	    },
	    propEditorWrapper: {
	        padding: '10px 10px 10px 0',
	        width: 400,
	        overflow: 'scroll',
	        maxHeight: 800,
	        borderRight: '1px dotted black'
	    },
	    componentTableWrapper: {
	        padding: '10px 0',
	        flexGrow: 1,
	        overflow: 'auto',
	        maxHeight: 800
	    },
	    errorBox: {
	        background: 'red',
	        color: 'black',
	        whiteSpace: 'pre',
	        textAlign: 'left'
	    }
	});

	module.exports = SandboxInstance;

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/*eslint-disable react/forbid-prop-types*/

	/**
	 * Component for editing the props of a specific component instance.
	 */

	"use strict";

	var React = __webpack_require__(2);

	var SinglePropEditor = __webpack_require__(15);

	var RP = React.PropTypes;

	var PropEditor = React.createClass({
	    displayName: "PropEditor",

	    propTypes: {
	        // The component class whose props are being edited
	        component: RP.func.isRequired,

	        // The current set of props to display for this fixture
	        componentProps: RP.object.isRequired,

	        // Cursor to the data this binds to in the fixtures.
	        cursor: RP.arrayOf(RP.oneOfType([RP.string.isRequired, RP.number.isRequired]).isRequired).isRequired,

	        // Invoked with new values of props as they change
	        onChange: RP.func.isRequired,

	        // Invoked with the cursor of the props to edit
	        onRequestEdit: RP.func.isRequired,

	        // The type of the prop to edit. This will match the return
	        // type of inferTypesForComponent.
	        types: RP.objectOf(SinglePropEditor.propTypes.type).isRequired
	    },

	    handleEditRequest: function handleEditRequest() {
	        var _props = this.props;
	        var onRequestEdit = _props.onRequestEdit;
	        var cursor = _props.cursor;

	        onRequestEdit(cursor);
	    },

	    render: function render() {
	        var _props2 = this.props;
	        var componentProps = _props2.componentProps;
	        var onChange = _props2.onChange;
	        var onRequestEdit = _props2.onRequestEdit;
	        var cursor = _props2.cursor;
	        var types = _props2.types;

	        var content = Object.keys(types).map(function (key) {
	            return React.createElement(SinglePropEditor, {
	                key: key,
	                name: key,
	                type: types[key],
	                value: componentProps[key],
	                onChange: onChange,
	                onRequestEdit: onRequestEdit,
	                cursor: cursor.concat([key])
	            });
	        });

	        return React.createElement(
	            "div",
	            null,
	            React.createElement(
	                "div",
	                null,
	                React.createElement(
	                    "button",
	                    { onClick: this.handleEditRequest },
	                    "Edit props as JavaScript"
	                ),
	                ' ',
	                "or click on a prop label to edit any part."
	            ),
	            content.length > 0 ? content : "No propTypes declared!"
	        );
	    }
	});

	module.exports = PropEditor;

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * A component for editing the value of a single (possibly complex) prop of
	 * a component.
	 */

	"use strict";

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(2);
	var ReactDOM = __webpack_require__(16);

	var _require = __webpack_require__(4);

	var StyleSheet = _require.StyleSheet;
	var css = _require.css;

	var PureRenderMixinWithCursor = __webpack_require__(17);

	var _require2 = __webpack_require__(5);

	var valueSatisfiesType = _require2.valueSatisfiesType;
	var generateRandomValueForType = _require2.generateRandomValueForType;

	var serializeToJS = __webpack_require__(18);

	var RP = React.PropTypes;

	var debounce = function debounce(fn, wait) {
	    var timeout = undefined;
	    return function () {
	        var _this = this;

	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }

	        var later = function later() {
	            fn.apply(_this, args);
	        };
	        clearTimeout(timeout);
	        timeout = setTimeout(later, wait);
	    };
	};

	var DebouncedInput = React.createClass({
	    displayName: "DebouncedInput",

	    propTypes: {
	        onChange: RP.func.isRequired,
	        value: RP.string
	    },

	    getInitialState: function getInitialState() {
	        return {
	            internalValue: this.props.value
	        };
	    },

	    componentWillMount: function componentWillMount() {
	        this.debouncedOnChange = debounce(this.props.onChange, 100);
	    },

	    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	        // Only over-ride the internal value if the element is not focused.
	        if (ReactDOM.findDOMNode(this) !== document.activeElement) {
	            this.setState({
	                internalValue: nextProps.value
	            });
	        }
	    },

	    handleChange: function handleChange(ev) {
	        var value = ev.target.value;
	        this.setState({ internalValue: value });
	        this.debouncedOnChange(value);
	    },

	    render: function render() {
	        return React.createElement("input", _extends({}, this.props, {
	            onChange: this.handleChange,
	            value: this.state.internalValue
	        }));
	    }
	});

	var FIELD_RENDERERS = (function () {
	    var string = function string(_ref) {
	        var value = _ref.value;
	        var cursor = _ref.cursor;
	        var onChange = _ref.onChange;

	        return React.createElement(DebouncedInput, {
	            className: css(styles.stringInput),
	            type: "text",
	            value: value,
	            placeholder: value == null ? '(null)' : '',
	            onChange: function (value) {
	                return onChange(cursor, value);
	            }
	        });
	    };

	    var bool = function bool(_ref2) {
	        var value = _ref2.value;
	        var cursor = _ref2.cursor;
	        var onChange = _ref2.onChange;

	        return React.createElement(
	            "div",
	            null,
	            React.createElement("input", {
	                type: "checkbox",
	                checked: value,
	                onChange: function (ev) {
	                    return onChange(cursor, ev.target.checked);
	                }
	            }),
	            JSON.stringify(value)
	        );
	    };

	    var number = function number(_ref3) {
	        var value = _ref3.value;
	        var cursor = _ref3.cursor;
	        var onChange = _ref3.onChange;

	        return React.createElement("input", {
	            type: "number",
	            value: value,
	            placeholder: value == null ? '(null)' : '',
	            onChange: function (ev) {
	                return onChange(cursor, parseFloat(ev.target.value, 10));
	            }
	        });
	    };

	    var oneOf = function oneOf(_ref4) {
	        var type = _ref4.type;
	        var value = _ref4.value;
	        var cursor = _ref4.cursor;
	        var onChange = _ref4.onChange;

	        // This might look really unnecessary, but we need it because of type
	        // coercion. `ev.target.value` is always going to be a string, but
	        // `option` may not be, e.g. if you have React.PropTypes.oneOf([0, 1]);
	        var optionToValue = {};
	        type.args[0].forEach(function (option) {
	            optionToValue[option] = option;
	        });

	        return React.createElement(
	            "select",
	            {
	                value: value,
	                onChange: function (ev) {
	                    return onChange(cursor, optionToValue[ev.target.value]);
	                }
	            },
	            type.args[0].map(function (option) {
	                return React.createElement(
	                    "option",
	                    { key: option, value: option },
	                    option
	                );
	            })
	        );
	    };

	    var arrayOf = function arrayOf(_ref5) {
	        var name = _ref5.name;
	        var value = _ref5.value;
	        var cursor = _ref5.cursor;
	        var type = _ref5.type;
	        var onChange = _ref5.onChange;
	        var onRequestEdit = _ref5.onRequestEdit;
	        var ancestorValid = _ref5.ancestorValid;

	        var arrayVal = value || [];

	        return React.createElement(
	            "div",
	            null,
	            arrayVal.map(function (item, index) {
	                return React.createElement(
	                    "div",
	                    {
	                        className: css(styles.nestedProp, styles.arrayItem),
	                        key: index
	                    },
	                    React.createElement(
	                        "button",
	                        { onClick: function () {
	                                onChange(cursor, arrayVal.slice(0, index).concat(arrayVal.slice(index + 1)));
	                            }
	                        },
	                        "x"
	                    ),
	                    React.createElement(
	                        "div",
	                        { className: css(styles.grow) },
	                        React.createElement(SinglePropEditor, {
	                            name: name + "[" + index + "]",
	                            type: type.args[0],
	                            value: item,
	                            onChange: onChange,
	                            onRequestEdit: onRequestEdit,
	                            cursor: cursor.concat([index]),
	                            ancestorValid: ancestorValid
	                        })
	                    )
	                );
	            }),
	            React.createElement(
	                "button",
	                {
	                    key: "add",
	                    onClick: function () {
	                        var nextVal = generateRandomValueForType(type.args[0], cursor);
	                        onChange(cursor, arrayVal.concat([nextVal]));
	                    }
	                },
	                "Add item to ",
	                name
	            )
	        );
	    };

	    var shape = function shape(_ref6) {
	        var name = _ref6.name;
	        var value = _ref6.value;
	        var type = _ref6.type;
	        var cursor = _ref6.cursor;
	        var onRequestEdit = _ref6.onRequestEdit;
	        var onChange = _ref6.onChange;
	        var ancestorValid = _ref6.ancestorValid;

	        var shape = type.args[0];
	        var objVal = value || {};
	        return React.createElement(
	            "div",
	            null,
	            Object.keys(shape).map(function (childKey) {
	                return React.createElement(
	                    "div",
	                    { className: css(styles.nestedProp), key: childKey },
	                    React.createElement(SinglePropEditor, {
	                        name: name + "." + childKey,
	                        type: shape[childKey],
	                        value: objVal[childKey],
	                        onChange: onChange,
	                        onRequestEdit: onRequestEdit,
	                        cursor: cursor.concat([childKey]),
	                        ancestorValid: ancestorValid
	                    })
	                );
	            })
	        );
	    };

	    var wrapWithUpdater = function wrapWithUpdater(content, _ref7) {
	        var onRequestEdit = _ref7.onRequestEdit;
	        var cursor = _ref7.cursor;

	        return React.createElement(
	            "span",
	            {
	                onClick: function () {
	                    return onRequestEdit(cursor);
	                }
	            },
	            content
	        );
	    };

	    var unknown = function unknown(_ref8) {
	        var value = _ref8.value;
	        var onRequestEdit = _ref8.onRequestEdit;
	        var cursor = _ref8.cursor;

	        var content = '';
	        try {
	            content = JSON.stringify(value);
	        } catch (e) {
	            content = value.toString();
	        }

	        return wrapWithUpdater(content, { onRequestEdit: onRequestEdit, cursor: cursor });
	    };

	    var instanceOf = function instanceOf(_ref9) {
	        var value = _ref9.value;

	        return value == null ? '(null)' : value.toString();
	    };

	    var func = function func(_ref10) {
	        var value = _ref10.value;
	        var onRequestEdit = _ref10.onRequestEdit;
	        var cursor = _ref10.cursor;

	        var content = value == null ? '(null)' : value.toString();
	        return wrapWithUpdater(content, { onRequestEdit: onRequestEdit, cursor: cursor });
	    };

	    var nullable = function nullable(inputType, props) {
	        var onChange = props.onChange;
	        var value = props.value;
	        var cursor = props.cursor;

	        return React.createElement(
	            "div",
	            { className: css(styles.nullableField) },
	            React.createElement(
	                "div",
	                { className: css(styles.grow) },
	                FIELD_RENDERERS[inputType](props)
	            ),
	            React.createElement(
	                "button",
	                {
	                    onClick: function () {
	                        return onChange(cursor, null);
	                    },
	                    disabled: value == null
	                },
	                "null"
	            )
	        );
	    };

	    return {
	        string: string,
	        node: string,
	        element: string,
	        bool: bool,
	        number: number,
	        oneOf: oneOf,
	        arrayOf: arrayOf,
	        shape: shape,
	        instanceOf: instanceOf,
	        func: func,
	        unknown: unknown,
	        nullable: nullable
	    };
	})();

	var SinglePropEditor = React.createClass({
	    displayName: "SinglePropEditor",

	    propTypes: {
	        // True if the parent prop editor has valid props. Defaults to false.
	        // This default should only be used for the top-level props.
	        ancestorValid: RP.bool.isRequired,

	        // Cursor to the data this binds to in the fixtures.
	        cursor: RP.arrayOf(RP.oneOfType([RP.string.isRequired, RP.number.isRequired]).isRequired).isRequired,

	        // The name of the prop
	        name: RP.string.isRequired,

	        onChange: RP.func.isRequired,

	        onRequestEdit: RP.func.isRequired,

	        // The type of the prop to edit. This will match the values of return
	        // type of inferTypes.
	        type: RP.oneOfType([RP.func.isRequired, RP.shape({
	            type: RP.string.isRequired,
	            required: RP.bool.isRequired,
	            args: RP.array(RP.object.isRequired)
	        }).isRequired]).isRequired,

	        // The current value of this prop.
	        value: RP.any
	    },

	    mixins: [PureRenderMixinWithCursor],

	    getDefaultProps: function getDefaultProps() {
	        return {
	            ancestorValid: false
	        };
	    },

	    handleRequestEdit: function handleRequestEdit() {
	        var _props = this.props;
	        var onRequestEdit = _props.onRequestEdit;
	        var cursor = _props.cursor;

	        onRequestEdit(cursor);
	    },

	    render: function render() {
	        var _props2 = this.props;
	        var name = _props2.name;
	        var value = _props2.value;
	        var type = _props2.type;
	        var ancestorValid = _props2.ancestorValid;

	        // TODO(jlfwong): Adding to objectOf
	        // TODO(jlfwong): Drag to re-arrange in arrays

	        var inputType = FIELD_RENDERERS[type.type] ? type.type : 'unknown';

	        // The validity of this field is unimportant if one of the ancestors
	        // validated. This allows us to ignore fields that are invalid when
	        // a parent is null.
	        var valid = ancestorValid || valueSatisfiesType(value, type);

	        var props = _extends({}, this.props, {
	            ancestorValid: valid
	        });

	        var fieldEditor = type.required ? FIELD_RENDERERS[inputType](props) : FIELD_RENDERERS.nullable(inputType, props);

	        return React.createElement(
	            "div",
	            { className: css(styles.singleField, !valid && styles.invalidField)
	            },
	            React.createElement(
	                "span",
	                {
	                    className: css(styles.nameLabel),
	                    onClick: this.handleRequestEdit
	                },
	                name
	            ),
	            fieldEditor
	        );
	    }
	});

	var styles = StyleSheet.create({
	    singleField: {
	        borderBottom: '1px dotted grey',
	        position: 'relative',
	        padding: '15px 0 5px 0',
	        textAlign: 'left',
	        background: 'white'
	    },
	    invalidField: {
	        background: 'rgba(255, 0, 0, 0.4)'
	    },
	    nullableField: {
	        display: 'flex',
	        fontFamily: 'monospace'
	    },
	    nameLabel: {
	        position: 'absolute',
	        fontFamily: 'monospace',
	        fontSize: 10,
	        top: 0,
	        left: 0
	    },
	    nestedProp: {
	        marginLeft: 10
	    },
	    arrayItem: {
	        display: 'flex',
	        alignItems: 'flex-start'
	    },
	    grow: {
	        flexGrow: 1
	    },
	    stringInput: {
	        boxSizing: 'border-box',
	        width: '95%'
	    }
	});

	module.exports = SinglePropEditor;

/***/ },
/* 16 */
/***/ function(module, exports) {

	module.exports = require("react-dom");

/***/ },
/* 17 */
/***/ function(module, exports) {

	// Modified version of shallowEqual from
	// https://github.com/gaearon/react-pure-render/blob/master/src/shallowEqual.js
	// with added support for custom predicates for certain keys
	'use strict';

	var shallowEqual = function shallowEqual(objA, objB) {
	    var customEquality = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	    if (objA === objB) {
	        return true;
	    }

	    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {

	        return false;
	    }

	    var keysA = Object.keys(objA);
	    var keysB = Object.keys(objB);

	    if (keysA.length !== keysB.length) {
	        return false;
	    }

	    // Test for A's keys different from B.
	    var hasOwnProperty = Object.prototype.hasOwnProperty;
	    var bHasOwnProperty = hasOwnProperty.bind(objB);
	    var cEqHasOwnProperty = hasOwnProperty.bind(customEquality);

	    for (var i = 0; i < keysA.length; i++) {
	        var key = keysA[i];

	        if (!bHasOwnProperty(key)) {
	            return false;
	        }

	        if (cEqHasOwnProperty(key)) {
	            if (!customEquality[key](objA[key], objB[key])) {
	                return false;
	            }
	        } else if (objA[key] !== objB[key]) {
	            return false;
	        }
	    }

	    return true;
	};

	/**
	 * A mixin for only updating if props differ shallowly,
	 * except for the cursor, which will be checked for deep equality.
	 */
	var PureRenderMixinWithCursor = {
	    shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
	        var propsEqual = shallowEqual(this.props, nextProps, {
	            cursor: function cursor(a, b) {
	                return a.join(',') === b.join(',');
	            }
	        });

	        if (!propsEqual) {
	            return true;
	        }

	        if (!shallowEqual(this.state, nextState)) {
	            return true;
	        }

	        return false;
	    }
	};

	module.exports = PureRenderMixinWithCursor;

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isPlainObject = __webpack_require__(19);

	// TODO(jlfwong): Tests
	var serializeToJS = function serializeToJS(val) {
	    var indent = function indent(x) {
	        return x.replace(/^/gm, '    ');
	    };

	    if (typeof val === 'undefined') {
	        return 'undefined';
	    }
	    if (val == null) {
	        return 'null';
	    }
	    if (Array.isArray(val)) {
	        var children = val.map(serializeToJS);
	        if (children.length === 0) {
	            return '[]';
	        }
	        return '[\n' + indent(children.join(',\n')) + '\n]';
	    }
	    if (typeof val === 'object') {
	        if (!isPlainObject(val)) {
	            return '"<<object w/ custom constructor>>"';
	        }

	        var childKeys = Object.keys(val).filter(function (k) {
	            return typeof val[k] !== 'undefined';
	        });
	        if (childKeys.length === 0) {
	            return '{}';
	        }
	        return '{\n' + indent(childKeys.map(function (k) {
	            // TODO(jlfwong): Escape key? Mehhh
	            return '"' + k + '": ' + serializeToJS(val[k]);
	        }).join(',\n')) + '\n}';
	    }
	    if (typeof val === 'function') {
	        return val.toString();
	    }
	    // Fallback to JSON serialization. This covers primitives like numbers,
	    // string, and booleans
	    return JSON.stringify(val);
	};

	module.exports = serializeToJS;

/***/ },
/* 19 */
/***/ function(module, exports) {

	/**
	 * lodash 4.0.3 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/** `Object#toString` result references. */
	var objectTag = '[object Object]';

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = Function.prototype.toString;

	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Built-in value references. */
	var getPrototypeOf = Object.getPrototypeOf;

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) ||
	      objectToString.call(value) != objectTag || isHostObject(value)) {
	    return false;
	  }
	  var proto = getPrototypeOf(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = proto.constructor;
	  return (typeof Ctor == 'function' &&
	    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
	}

	module.exports = isPlainObject;


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/*eslint-disable no-fallthrough, no-console*/

	/**
	 * Redux store containing state for the sandbox.
	 */

	"use strict";

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _require = __webpack_require__(21);

	var combineReducers = _require.combineReducers;
	var applyMiddleware = _require.applyMiddleware;
	var createStore = _require.createStore;

	var thunkMiddleware = __webpack_require__(32);
	var icepick = __webpack_require__(7);

	var _require2 = __webpack_require__(5);

	var inferTypesForComponent = _require2.inferTypesForComponent;

	var constants = __webpack_require__(10);

	// TODO(jlfwong): Tests

	var componentList = function componentList(state, action) {
	    if (state === undefined) state = null;

	    switch (action.type) {
	        case constants.COMPONENT_LIST_WILL_LOAD:
	            return null;

	        case constants.COMPONENT_LIST_DID_LOAD:
	            return action.components;
	    }
	    return state;
	};

	var selectedComponent = function selectedComponent(state, action) {
	    if (state === undefined) state = null;

	    switch (action.type) {
	        case constants.COMPONENT_SELECTED:
	            return _extends({}, state, {
	                key: action.key,
	                reference: null,
	                fixtures: null,
	                types: null
	            });

	        case constants.COMPONENT_REFERENCE_DID_LOAD:
	            // If a component reference was loaded but we've since switched to
	            // a different component, ignore the load.
	            if (action.key === state.key) {
	                return _extends({}, state, {
	                    reference: action.reference,
	                    types: inferTypesForComponent(action.reference)
	                });
	            }

	        case constants.FIXTURES_DID_LOAD:
	            // If fixtures were loaded but we've since switched to
	            // a different component, ignore the load.
	            if (action.key === state.key) {
	                return _extends({}, state, {
	                    fixtures: action.fixtures
	                });
	            }

	        case constants.UPDATE_FIXTURE:
	            var cursor = action.cursor,
	                newValue = action.newValue;

	            return _extends({}, state, {
	                fixtures: _extends({}, state.fixtures, {
	                    instances: icepick.assocIn(state.fixtures.instances, cursor,
	                    // If the value is null, we'll
	                    // set undefined to remove the
	                    // field altogether
	                    newValue == null ? undefined : newValue)
	                })
	            });

	        case constants.ADD_FIXTURE:
	            var props = action.props;

	            return _extends({}, state, {
	                fixtures: _extends({}, state.fixtures, {
	                    instances: state.fixtures.instances.concat([props])
	                })
	            });
	    }
	    return state;
	};

	var modalEditorCursor = function modalEditorCursor(state, action) {
	    if (state === undefined) state = null;

	    switch (action.type) {
	        case constants.OPEN_MODAL:
	            return action.cursor;

	        case constants.CLOSE_MODAL:
	            return null;
	    }
	    return state;
	};

	// From http://redux.js.org/docs/api/applyMiddleware.html
	function logger(_ref) {
	    var getState = _ref.getState;

	    return function (next) {
	        return function (action) {
	            console.log('will dispatch', action);

	            // Call the next dispatch method in the middleware chain.
	            var returnValue = next(action);

	            console.log('state after dispatch', getState());

	            // This will likely be the action itself, unless
	            // a middleware further in chain changed it.
	            return returnValue;
	        };
	    };
	}

	var store = combineReducers({
	    componentList: componentList,
	    selectedComponent: selectedComponent,
	    modalEditorCursor: modalEditorCursor
	});

	var createSandboxStore = function createSandboxStore() {
	    var includerLogger = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

	    var middleware = includerLogger ? [thunkMiddleware, logger] : [thunkMiddleware];
	    return applyMiddleware.apply(undefined, middleware)(createStore)(store);
	};

	module.exports = createSandboxStore;

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.compose = exports.applyMiddleware = exports.bindActionCreators = exports.combineReducers = exports.createStore = undefined;

	var _createStore = __webpack_require__(23);

	var _createStore2 = _interopRequireDefault(_createStore);

	var _combineReducers = __webpack_require__(27);

	var _combineReducers2 = _interopRequireDefault(_combineReducers);

	var _bindActionCreators = __webpack_require__(29);

	var _bindActionCreators2 = _interopRequireDefault(_bindActionCreators);

	var _applyMiddleware = __webpack_require__(30);

	var _applyMiddleware2 = _interopRequireDefault(_applyMiddleware);

	var _compose = __webpack_require__(31);

	var _compose2 = _interopRequireDefault(_compose);

	var _warning = __webpack_require__(28);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/*
	* This is a dummy function to check if the function name has been altered by minification.
	* If the function has been minified and NODE_ENV !== 'production', warn the user.
	*/
	function isCrushed() {}

	if (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
	  (0, _warning2["default"])('You are currently using minified code outside of NODE_ENV === \'production\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');
	}

	exports.createStore = _createStore2["default"];
	exports.combineReducers = _combineReducers2["default"];
	exports.bindActionCreators = _bindActionCreators2["default"];
	exports.applyMiddleware = _applyMiddleware2["default"];
	exports.compose = _compose2["default"];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(22)))

/***/ },
/* 22 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.ActionTypes = undefined;
	exports["default"] = createStore;

	var _isPlainObject = __webpack_require__(24);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/**
	 * These are private action types reserved by Redux.
	 * For any unknown actions, you must return the current state.
	 * If the current state is undefined, you must return the initial state.
	 * Do not reference these action types directly in your code.
	 */
	var ActionTypes = exports.ActionTypes = {
	  INIT: '@@redux/INIT'
	};

	/**
	 * Creates a Redux store that holds the state tree.
	 * The only way to change the data in the store is to call `dispatch()` on it.
	 *
	 * There should only be a single store in your app. To specify how different
	 * parts of the state tree respond to actions, you may combine several reducers
	 * into a single reducer function by using `combineReducers`.
	 *
	 * @param {Function} reducer A function that returns the next state tree, given
	 * the current state tree and the action to handle.
	 *
	 * @param {any} [initialState] The initial state. You may optionally specify it
	 * to hydrate the state from the server in universal apps, or to restore a
	 * previously serialized user session.
	 * If you use `combineReducers` to produce the root reducer function, this must be
	 * an object with the same shape as `combineReducers` keys.
	 *
	 * @param {Function} enhancer The store enhancer. You may optionally specify it
	 * to enhance the store with third-party capabilities such as middleware,
	 * time travel, persistence, etc. The only store enhancer that ships with Redux
	 * is `applyMiddleware()`.
	 *
	 * @returns {Store} A Redux store that lets you read the state, dispatch actions
	 * and subscribe to changes.
	 */
	function createStore(reducer, initialState, enhancer) {
	  if (typeof initialState === 'function' && typeof enhancer === 'undefined') {
	    enhancer = initialState;
	    initialState = undefined;
	  }

	  if (typeof enhancer !== 'undefined') {
	    if (typeof enhancer !== 'function') {
	      throw new Error('Expected the enhancer to be a function.');
	    }

	    return enhancer(createStore)(reducer, initialState);
	  }

	  if (typeof reducer !== 'function') {
	    throw new Error('Expected the reducer to be a function.');
	  }

	  var currentReducer = reducer;
	  var currentState = initialState;
	  var currentListeners = [];
	  var nextListeners = currentListeners;
	  var isDispatching = false;

	  function ensureCanMutateNextListeners() {
	    if (nextListeners === currentListeners) {
	      nextListeners = currentListeners.slice();
	    }
	  }

	  /**
	   * Reads the state tree managed by the store.
	   *
	   * @returns {any} The current state tree of your application.
	   */
	  function getState() {
	    return currentState;
	  }

	  /**
	   * Adds a change listener. It will be called any time an action is dispatched,
	   * and some part of the state tree may potentially have changed. You may then
	   * call `getState()` to read the current state tree inside the callback.
	   *
	   * You may call `dispatch()` from a change listener, with the following
	   * caveats:
	   *
	   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
	   * If you subscribe or unsubscribe while the listeners are being invoked, this
	   * will not have any effect on the `dispatch()` that is currently in progress.
	   * However, the next `dispatch()` call, whether nested or not, will use a more
	   * recent snapshot of the subscription list.
	   *
	   * 2. The listener should not expect to see all states changes, as the state
	   * might have been updated multiple times during a nested `dispatch()` before
	   * the listener is called. It is, however, guaranteed that all subscribers
	   * registered before the `dispatch()` started will be called with the latest
	   * state by the time it exits.
	   *
	   * @param {Function} listener A callback to be invoked on every dispatch.
	   * @returns {Function} A function to remove this change listener.
	   */
	  function subscribe(listener) {
	    if (typeof listener !== 'function') {
	      throw new Error('Expected listener to be a function.');
	    }

	    var isSubscribed = true;

	    ensureCanMutateNextListeners();
	    nextListeners.push(listener);

	    return function unsubscribe() {
	      if (!isSubscribed) {
	        return;
	      }

	      isSubscribed = false;

	      ensureCanMutateNextListeners();
	      var index = nextListeners.indexOf(listener);
	      nextListeners.splice(index, 1);
	    };
	  }

	  /**
	   * Dispatches an action. It is the only way to trigger a state change.
	   *
	   * The `reducer` function, used to create the store, will be called with the
	   * current state tree and the given `action`. Its return value will
	   * be considered the **next** state of the tree, and the change listeners
	   * will be notified.
	   *
	   * The base implementation only supports plain object actions. If you want to
	   * dispatch a Promise, an Observable, a thunk, or something else, you need to
	   * wrap your store creating function into the corresponding middleware. For
	   * example, see the documentation for the `redux-thunk` package. Even the
	   * middleware will eventually dispatch plain object actions using this method.
	   *
	   * @param {Object} action A plain object representing “what changed”. It is
	   * a good idea to keep actions serializable so you can record and replay user
	   * sessions, or use the time travelling `redux-devtools`. An action must have
	   * a `type` property which may not be `undefined`. It is a good idea to use
	   * string constants for action types.
	   *
	   * @returns {Object} For convenience, the same action object you dispatched.
	   *
	   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
	   * return something else (for example, a Promise you can await).
	   */
	  function dispatch(action) {
	    if (!(0, _isPlainObject2["default"])(action)) {
	      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
	    }

	    if (typeof action.type === 'undefined') {
	      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
	    }

	    if (isDispatching) {
	      throw new Error('Reducers may not dispatch actions.');
	    }

	    try {
	      isDispatching = true;
	      currentState = currentReducer(currentState, action);
	    } finally {
	      isDispatching = false;
	    }

	    var listeners = currentListeners = nextListeners;
	    for (var i = 0; i < listeners.length; i++) {
	      listeners[i]();
	    }

	    return action;
	  }

	  /**
	   * Replaces the reducer currently used by the store to calculate the state.
	   *
	   * You might need this if your app implements code splitting and you want to
	   * load some of the reducers dynamically. You might also need this if you
	   * implement a hot reloading mechanism for Redux.
	   *
	   * @param {Function} nextReducer The reducer for the store to use instead.
	   * @returns {void}
	   */
	  function replaceReducer(nextReducer) {
	    if (typeof nextReducer !== 'function') {
	      throw new Error('Expected the nextReducer to be a function.');
	    }

	    currentReducer = nextReducer;
	    dispatch({ type: ActionTypes.INIT });
	  }

	  // When a store is created, an "INIT" action is dispatched so that every
	  // reducer returns their initial state. This effectively populates
	  // the initial state tree.
	  dispatch({ type: ActionTypes.INIT });

	  return {
	    dispatch: dispatch,
	    subscribe: subscribe,
	    getState: getState,
	    replaceReducer: replaceReducer
	  };
	}

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	var isHostObject = __webpack_require__(25),
	    isObjectLike = __webpack_require__(26);

	/** `Object#toString` result references. */
	var objectTag = '[object Object]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = Function.prototype.toString;

	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Built-in value references. */
	var getPrototypeOf = Object.getPrototypeOf;

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) ||
	      objectToString.call(value) != objectTag || isHostObject(value)) {
	    return false;
	  }
	  var proto = getPrototypeOf(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = proto.constructor;
	  return (typeof Ctor == 'function' &&
	    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
	}

	module.exports = isPlainObject;


/***/ },
/* 25 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}

	module.exports = isHostObject;


/***/ },
/* 26 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	module.exports = isObjectLike;


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports["default"] = combineReducers;

	var _createStore = __webpack_require__(23);

	var _isPlainObject = __webpack_require__(24);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	var _warning = __webpack_require__(28);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function getUndefinedStateErrorMessage(key, action) {
	  var actionType = action && action.type;
	  var actionName = actionType && '"' + actionType.toString() + '"' || 'an action';

	  return 'Reducer "' + key + '" returned undefined handling ' + actionName + '. ' + 'To ignore an action, you must explicitly return the previous state.';
	}

	function getUnexpectedStateShapeWarningMessage(inputState, reducers, action) {
	  var reducerKeys = Object.keys(reducers);
	  var argumentName = action && action.type === _createStore.ActionTypes.INIT ? 'initialState argument passed to createStore' : 'previous state received by the reducer';

	  if (reducerKeys.length === 0) {
	    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
	  }

	  if (!(0, _isPlainObject2["default"])(inputState)) {
	    return 'The ' + argumentName + ' has unexpected type of "' + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
	  }

	  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
	    return !reducers.hasOwnProperty(key);
	  });

	  if (unexpectedKeys.length > 0) {
	    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
	  }
	}

	function assertReducerSanity(reducers) {
	  Object.keys(reducers).forEach(function (key) {
	    var reducer = reducers[key];
	    var initialState = reducer(undefined, { type: _createStore.ActionTypes.INIT });

	    if (typeof initialState === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined.');
	    }

	    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');
	    if (typeof reducer(undefined, { type: type }) === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + ('Don\'t try to handle ' + _createStore.ActionTypes.INIT + ' or other actions in "redux/*" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined.');
	    }
	  });
	}

	/**
	 * Turns an object whose values are different reducer functions, into a single
	 * reducer function. It will call every child reducer, and gather their results
	 * into a single state object, whose keys correspond to the keys of the passed
	 * reducer functions.
	 *
	 * @param {Object} reducers An object whose values correspond to different
	 * reducer functions that need to be combined into one. One handy way to obtain
	 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
	 * undefined for any action. Instead, they should return their initial state
	 * if the state passed to them was undefined, and the current state for any
	 * unrecognized action.
	 *
	 * @returns {Function} A reducer function that invokes every reducer inside the
	 * passed object, and builds a state object with the same shape.
	 */
	function combineReducers(reducers) {
	  var reducerKeys = Object.keys(reducers);
	  var finalReducers = {};
	  for (var i = 0; i < reducerKeys.length; i++) {
	    var key = reducerKeys[i];
	    if (typeof reducers[key] === 'function') {
	      finalReducers[key] = reducers[key];
	    }
	  }
	  var finalReducerKeys = Object.keys(finalReducers);

	  var sanityError;
	  try {
	    assertReducerSanity(finalReducers);
	  } catch (e) {
	    sanityError = e;
	  }

	  return function combination() {
	    var state = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	    var action = arguments[1];

	    if (sanityError) {
	      throw sanityError;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action);
	      if (warningMessage) {
	        (0, _warning2["default"])(warningMessage);
	      }
	    }

	    var hasChanged = false;
	    var nextState = {};
	    for (var i = 0; i < finalReducerKeys.length; i++) {
	      var key = finalReducerKeys[i];
	      var reducer = finalReducers[key];
	      var previousStateForKey = state[key];
	      var nextStateForKey = reducer(previousStateForKey, action);
	      if (typeof nextStateForKey === 'undefined') {
	        var errorMessage = getUndefinedStateErrorMessage(key, action);
	        throw new Error(errorMessage);
	      }
	      nextState[key] = nextStateForKey;
	      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
	    }
	    return hasChanged ? nextState : state;
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(22)))

/***/ },
/* 28 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports["default"] = warning;
	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */
	  try {
	    // This error was thrown as a convenience so that you can use this stack
	    // to find the callsite that caused this warning to fire.
	    throw new Error(message);
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */
	}

/***/ },
/* 29 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports["default"] = bindActionCreators;
	function bindActionCreator(actionCreator, dispatch) {
	  return function () {
	    return dispatch(actionCreator.apply(undefined, arguments));
	  };
	}

	/**
	 * Turns an object whose values are action creators, into an object with the
	 * same keys, but with every function wrapped into a `dispatch` call so they
	 * may be invoked directly. This is just a convenience method, as you can call
	 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
	 *
	 * For convenience, you can also pass a single function as the first argument,
	 * and get a function in return.
	 *
	 * @param {Function|Object} actionCreators An object whose values are action
	 * creator functions. One handy way to obtain it is to use ES6 `import * as`
	 * syntax. You may also pass a single function.
	 *
	 * @param {Function} dispatch The `dispatch` function available on your Redux
	 * store.
	 *
	 * @returns {Function|Object} The object mimicking the original object, but with
	 * every action creator wrapped into the `dispatch` call. If you passed a
	 * function as `actionCreators`, the return value will also be a single
	 * function.
	 */
	function bindActionCreators(actionCreators, dispatch) {
	  if (typeof actionCreators === 'function') {
	    return bindActionCreator(actionCreators, dispatch);
	  }

	  if (typeof actionCreators !== 'object' || actionCreators === null) {
	    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators) + '. ' + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
	  }

	  var keys = Object.keys(actionCreators);
	  var boundActionCreators = {};
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    var actionCreator = actionCreators[key];
	    if (typeof actionCreator === 'function') {
	      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
	    }
	  }
	  return boundActionCreators;
	}

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.__esModule = true;
	exports["default"] = applyMiddleware;

	var _compose = __webpack_require__(31);

	var _compose2 = _interopRequireDefault(_compose);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/**
	 * Creates a store enhancer that applies middleware to the dispatch method
	 * of the Redux store. This is handy for a variety of tasks, such as expressing
	 * asynchronous actions in a concise manner, or logging every action payload.
	 *
	 * See `redux-thunk` package as an example of the Redux middleware.
	 *
	 * Because middleware is potentially asynchronous, this should be the first
	 * store enhancer in the composition chain.
	 *
	 * Note that each middleware will be given the `dispatch` and `getState` functions
	 * as named arguments.
	 *
	 * @param {...Function} middlewares The middleware chain to be applied.
	 * @returns {Function} A store enhancer applying the middleware.
	 */
	function applyMiddleware() {
	  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
	    middlewares[_key] = arguments[_key];
	  }

	  return function (createStore) {
	    return function (reducer, initialState, enhancer) {
	      var store = createStore(reducer, initialState, enhancer);
	      var _dispatch = store.dispatch;
	      var chain = [];

	      var middlewareAPI = {
	        getState: store.getState,
	        dispatch: function dispatch(action) {
	          return _dispatch(action);
	        }
	      };
	      chain = middlewares.map(function (middleware) {
	        return middleware(middlewareAPI);
	      });
	      _dispatch = _compose2["default"].apply(undefined, chain)(store.dispatch);

	      return _extends({}, store, {
	        dispatch: _dispatch
	      });
	    };
	  };
	}

/***/ },
/* 31 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = compose;
	/**
	 * Composes single-argument functions from right to left.
	 *
	 * @param {...Function} funcs The functions to compose.
	 * @returns {Function} A function obtained by composing functions from right to
	 * left. For example, compose(f, g, h) is identical to arg => f(g(h(arg))).
	 */
	function compose() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }

	  return function () {
	    if (funcs.length === 0) {
	      return arguments.length <= 0 ? undefined : arguments[0];
	    }

	    var last = funcs[funcs.length - 1];
	    var rest = funcs.slice(0, -1);

	    return rest.reduceRight(function (composed, f) {
	      return f(composed);
	    }, last.apply(undefined, arguments));
	  };
	}

/***/ },
/* 32 */
/***/ function(module, exports) {

	module.exports = require("redux-thunk");

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(34);



/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var React = __webpack_require__(2);
	var ReactDOM = __webpack_require__(16);
	var ExecutionEnvironment = __webpack_require__(35);
	var ModalPortal = React.createFactory(__webpack_require__(36));
	var ariaAppHider = __webpack_require__(51);
	var elementClass = __webpack_require__(52);
	var renderSubtreeIntoContainer = __webpack_require__(16).unstable_renderSubtreeIntoContainer;

	var SafeHTMLElement = ExecutionEnvironment.canUseDOM ? window.HTMLElement : {};

	var Modal = module.exports = React.createClass({

	  displayName: 'Modal',
	  statics: {
	    setAppElement: ariaAppHider.setElement,
	    injectCSS: function() {
	      "production" !== process.env.NODE_ENV
	        && console.warn('React-Modal: injectCSS has been deprecated ' +
	                        'and no longer has any effect. It will be removed in a later version');
	    }
	  },

	  propTypes: {
	    isOpen: React.PropTypes.bool.isRequired,
	    style: React.PropTypes.shape({
	      content: React.PropTypes.object,
	      overlay: React.PropTypes.object
	    }),
	    appElement: React.PropTypes.instanceOf(SafeHTMLElement),
	    onRequestClose: React.PropTypes.func,
	    closeTimeoutMS: React.PropTypes.number,
	    ariaHideApp: React.PropTypes.bool
	  },

	  getDefaultProps: function () {
	    return {
	      isOpen: false,
	      ariaHideApp: true,
	      closeTimeoutMS: 0
	    };
	  },

	  componentDidMount: function() {
	    this.node = document.createElement('div');
	    this.node.className = 'ReactModalPortal';
	    document.body.appendChild(this.node);
	    this.renderPortal(this.props);
	  },

	  componentWillReceiveProps: function(newProps) {
	    this.renderPortal(newProps);
	  },

	  componentWillUnmount: function() {
	    ReactDOM.unmountComponentAtNode(this.node);
	    document.body.removeChild(this.node);
	  },

	  renderPortal: function(props) {
	    if (props.isOpen) {
	      elementClass(document.body).add('ReactModal__Body--open');
	    } else {
	      elementClass(document.body).remove('ReactModal__Body--open');
	    }

	    if (props.ariaHideApp) {
	      ariaAppHider.toggle(props.isOpen, props.appElement);
	    }
	    sanitizeProps(props);
	    this.portal = renderSubtreeIntoContainer(this, ModalPortal(props), this.node);
	  },

	  render: function () {
	    return React.DOM.noscript();
	  }
	});

	function sanitizeProps(props) {
	  delete props.ref;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(22)))

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2015 Jed Watson.
	  Based on code that is Copyright 2013-2015, Facebook, Inc.
	  All rights reserved.
	*/

	(function () {
		'use strict';

		var canUseDOM = !!(
			typeof window !== 'undefined' &&
			window.document &&
			window.document.createElement
		);

		var ExecutionEnvironment = {

			canUseDOM: canUseDOM,

			canUseWorkers: typeof Worker !== 'undefined',

			canUseEventListeners:
				canUseDOM && !!(window.addEventListener || window.attachEvent),

			canUseViewport: canUseDOM && !!window.screen

		};

		if (true) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return ExecutionEnvironment;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (typeof module !== 'undefined' && module.exports) {
			module.exports = ExecutionEnvironment;
		} else {
			window.ExecutionEnvironment = ExecutionEnvironment;
		}

	}());


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(2);
	var div = React.DOM.div;
	var focusManager = __webpack_require__(37);
	var scopeTab = __webpack_require__(39);
	var Assign = __webpack_require__(40);


	// so that our CSS is statically analyzable
	var CLASS_NAMES = {
	  overlay: {
	    base: 'ReactModal__Overlay',
	    afterOpen: 'ReactModal__Overlay--after-open',
	    beforeClose: 'ReactModal__Overlay--before-close'
	  },
	  content: {
	    base: 'ReactModal__Content',
	    afterOpen: 'ReactModal__Content--after-open',
	    beforeClose: 'ReactModal__Content--before-close'
	  }
	};

	var defaultStyles = {
	  overlay: {
	    position        : 'fixed',
	    top             : 0,
	    left            : 0,
	    right           : 0,
	    bottom          : 0,
	    backgroundColor : 'rgba(255, 255, 255, 0.75)'
	  },
	  content: {
	    position                : 'absolute',
	    top                     : '40px',
	    left                    : '40px',
	    right                   : '40px',
	    bottom                  : '40px',
	    border                  : '1px solid #ccc',
	    background              : '#fff',
	    overflow                : 'auto',
	    WebkitOverflowScrolling : 'touch',
	    borderRadius            : '4px',
	    outline                 : 'none',
	    padding                 : '20px'
	  }
	};

	function stopPropagation(event) {
	  event.stopPropagation();
	}

	var ModalPortal = module.exports = React.createClass({

	  displayName: 'ModalPortal',

	  getDefaultProps: function() {
	    return {
	      style: {
	        overlay: {},
	        content: {}
	      }
	    };
	  },

	  getInitialState: function() {
	    return {
	      afterOpen: false,
	      beforeClose: false
	    };
	  },

	  componentDidMount: function() {
	    // Focus needs to be set when mounting and already open
	    if (this.props.isOpen) {
	      this.setFocusAfterRender(true);
	      this.open();
	    }
	  },

	  componentWillUnmount: function() {
	    clearTimeout(this.closeTimer);
	  },

	  componentWillReceiveProps: function(newProps) {
	    // Focus only needs to be set once when the modal is being opened
	    if (!this.props.isOpen && newProps.isOpen) {
	      this.setFocusAfterRender(true);
	      this.open();
	    } else if (this.props.isOpen && !newProps.isOpen) {
	      this.close();
	    }
	  },

	  componentDidUpdate: function () {
	    if (this.focusAfterRender) {
	      this.focusContent();
	      this.setFocusAfterRender(false);
	    }
	  },

	  setFocusAfterRender: function (focus) {
	    this.focusAfterRender = focus;
	  },

	  open: function() {
	    focusManager.setupScopedFocus(this.node);
	    focusManager.markForFocusLater();
	    this.setState({isOpen: true}, function() {
	      this.setState({afterOpen: true});
	    }.bind(this));
	  },

	  close: function() {
	    if (!this.ownerHandlesClose())
	      return;
	    if (this.props.closeTimeoutMS > 0)
	      this.closeWithTimeout();
	    else
	      this.closeWithoutTimeout();
	  },

	  focusContent: function() {
	    this.refs.content.focus();
	  },

	  closeWithTimeout: function() {
	    this.setState({beforeClose: true}, function() {
	      this.closeTimer = setTimeout(this.closeWithoutTimeout, this.props.closeTimeoutMS);
	    }.bind(this));
	  },

	  closeWithoutTimeout: function() {
	    this.setState({
	      afterOpen: false,
	      beforeClose: false
	    }, this.afterClose);
	  },

	  afterClose: function() {
	    focusManager.returnFocus();
	    focusManager.teardownScopedFocus();
	  },

	  handleKeyDown: function(event) {
	    if (event.keyCode == 9 /*tab*/) scopeTab(this.refs.content, event);
	    if (event.keyCode == 27 /*esc*/) this.requestClose();
	  },

	  handleOverlayClick: function() {
	    if (this.ownerHandlesClose())
	      this.requestClose();
	    else
	      this.focusContent();
	  },

	  requestClose: function() {
	    if (this.ownerHandlesClose())
	      this.props.onRequestClose();
	  },

	  ownerHandlesClose: function() {
	    return this.props.onRequestClose;
	  },

	  shouldBeClosed: function() {
	    return !this.props.isOpen && !this.state.beforeClose;
	  },

	  buildClassName: function(which, additional) {
	    var className = CLASS_NAMES[which].base;
	    if (this.state.afterOpen)
	      className += ' '+CLASS_NAMES[which].afterOpen;
	    if (this.state.beforeClose)
	      className += ' '+CLASS_NAMES[which].beforeClose;
	    return additional ? className + ' ' + additional : className;
	  },

	  render: function() {
	    return this.shouldBeClosed() ? div() : (
	      div({
	        ref: "overlay",
	        className: this.buildClassName('overlay', this.props.overlayClassName),
	        style: Assign({}, defaultStyles.overlay, this.props.style.overlay || {}),
	        onClick: this.handleOverlayClick
	      },
	        div({
	          ref: "content",
	          style: Assign({}, defaultStyles.content, this.props.style.content || {}),
	          className: this.buildClassName('content', this.props.className),
	          tabIndex: "-1",
	          onClick: stopPropagation,
	          onKeyDown: this.handleKeyDown
	        },
	          this.props.children
	        )
	      )
	    );
	  }
	});


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	var findTabbable = __webpack_require__(38);
	var modalElement = null;
	var focusLaterElement = null;
	var needToFocus = false;

	function handleBlur(event) {
	  needToFocus = true;
	}

	function handleFocus(event) {
	  if (needToFocus) {
	    needToFocus = false;
	    if (!modalElement) {
	      return;
	    }
	    // need to see how jQuery shims document.on('focusin') so we don't need the
	    // setTimeout, firefox doesn't support focusin, if it did, we could focus
	    // the element outside of a setTimeout. Side-effect of this implementation 
	    // is that the document.body gets focus, and then we focus our element right 
	    // after, seems fine.
	    setTimeout(function() {
	      if (modalElement.contains(document.activeElement))
	        return;
	      var el = (findTabbable(modalElement)[0] || modalElement);
	      el.focus();
	    }, 0);
	  }
	}

	exports.markForFocusLater = function() {
	  focusLaterElement = document.activeElement;
	};

	exports.returnFocus = function() {
	  try {
	    focusLaterElement.focus();
	  }
	  catch (e) {
	    console.warn('You tried to return focus to '+focusLaterElement+' but it is not in the DOM anymore');
	  }
	  focusLaterElement = null;
	};

	exports.setupScopedFocus = function(element) {
	  modalElement = element;

	  if (window.addEventListener) {
	    window.addEventListener('blur', handleBlur, false);
	    document.addEventListener('focus', handleFocus, true);
	  } else {
	    window.attachEvent('onBlur', handleBlur);
	    document.attachEvent('onFocus', handleFocus);
	  }
	};

	exports.teardownScopedFocus = function() {
	  modalElement = null;

	  if (window.addEventListener) {
	    window.removeEventListener('blur', handleBlur);
	    document.removeEventListener('focus', handleFocus);
	  } else {
	    window.detachEvent('onBlur', handleBlur);
	    document.detachEvent('onFocus', handleFocus);
	  }
	};




/***/ },
/* 38 */
/***/ function(module, exports) {

	/*!
	 * Adapted from jQuery UI core
	 *
	 * http://jqueryui.com
	 *
	 * Copyright 2014 jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/category/ui-core/
	 */

	function focusable(element, isTabIndexNotNaN) {
	  var nodeName = element.nodeName.toLowerCase();
	  return (/input|select|textarea|button|object/.test(nodeName) ?
	    !element.disabled :
	    "a" === nodeName ?
	      element.href || isTabIndexNotNaN :
	      isTabIndexNotNaN) && visible(element);
	}

	function hidden(el) {
	  return (el.offsetWidth <= 0 && el.offsetHeight <= 0) ||
	    el.style.display === 'none';
	}

	function visible(element) {
	  while (element) {
	    if (element === document.body) break;
	    if (hidden(element)) return false;
	    element = element.parentNode;
	  }
	  return true;
	}

	function tabbable(element) {
	  var tabIndex = element.getAttribute('tabindex');
	  if (tabIndex === null) tabIndex = undefined;
	  var isTabIndexNaN = isNaN(tabIndex);
	  return (isTabIndexNaN || tabIndex >= 0) && focusable(element, !isTabIndexNaN);
	}

	function findTabbableDescendants(element) {
	  return [].slice.call(element.querySelectorAll('*'), 0).filter(function(el) {
	    return tabbable(el);
	  });
	}

	module.exports = findTabbableDescendants;



/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	var findTabbable = __webpack_require__(38);

	module.exports = function(node, event) {
	  var tabbable = findTabbable(node);
	  var finalTabbable = tabbable[event.shiftKey ? 0 : tabbable.length - 1];
	  var leavingFinalTabbable = (
	    finalTabbable === document.activeElement ||
	    // handle immediate shift+tab after opening with mouse
	    node === document.activeElement
	  );
	  if (!leavingFinalTabbable) return;
	  event.preventDefault();
	  var target = tabbable[event.shiftKey ? tabbable.length - 1 : 0];
	  target.focus();
	};


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * lodash 3.2.0 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	var baseAssign = __webpack_require__(41),
	    createAssigner = __webpack_require__(47),
	    keys = __webpack_require__(43);

	/**
	 * A specialized version of `_.assign` for customizing assigned values without
	 * support for argument juggling, multiple sources, and `this` binding `customizer`
	 * functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {Function} customizer The function to customize assigned values.
	 * @returns {Object} Returns `object`.
	 */
	function assignWith(object, source, customizer) {
	  var index = -1,
	      props = keys(source),
	      length = props.length;

	  while (++index < length) {
	    var key = props[index],
	        value = object[key],
	        result = customizer(value, source[key], key, object, source);

	    if ((result === result ? (result !== value) : (value === value)) ||
	        (value === undefined && !(key in object))) {
	      object[key] = result;
	    }
	  }
	  return object;
	}

	/**
	 * Assigns own enumerable properties of source object(s) to the destination
	 * object. Subsequent sources overwrite property assignments of previous sources.
	 * If `customizer` is provided it is invoked to produce the assigned values.
	 * The `customizer` is bound to `thisArg` and invoked with five arguments:
	 * (objectValue, sourceValue, key, object, source).
	 *
	 * **Note:** This method mutates `object` and is based on
	 * [`Object.assign`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign).
	 *
	 * @static
	 * @memberOf _
	 * @alias extend
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @param {*} [thisArg] The `this` binding of `customizer`.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
	 * // => { 'user': 'fred', 'age': 40 }
	 *
	 * // using a customizer callback
	 * var defaults = _.partialRight(_.assign, function(value, other) {
	 *   return _.isUndefined(value) ? other : value;
	 * });
	 *
	 * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	 * // => { 'user': 'barney', 'age': 36 }
	 */
	var assign = createAssigner(function(object, source, customizer) {
	  return customizer
	    ? assignWith(object, source, customizer)
	    : baseAssign(object, source);
	});

	module.exports = assign;


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * lodash 3.2.0 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	var baseCopy = __webpack_require__(42),
	    keys = __webpack_require__(43);

	/**
	 * The base implementation of `_.assign` without support for argument juggling,
	 * multiple sources, and `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssign(object, source) {
	  return source == null
	    ? object
	    : baseCopy(source, keys(source), object);
	}

	module.exports = baseAssign;


/***/ },
/* 42 */
/***/ function(module, exports) {

	/**
	 * lodash 3.0.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property names to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @returns {Object} Returns `object`.
	 */
	function baseCopy(source, props, object) {
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];
	    object[key] = source[key];
	  }
	  return object;
	}

	module.exports = baseCopy;


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * lodash 3.1.2 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	var getNative = __webpack_require__(44),
	    isArguments = __webpack_require__(45),
	    isArray = __webpack_require__(46);

	/** Used to detect unsigned integer values. */
	var reIsUint = /^\d+$/;

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeKeys = getNative(Object, 'keys');

	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	 * that affects Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');

	/**
	 * Checks if `value` is array-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 */
	function isArrayLike(value) {
	  return value != null && isLength(getLength(value));
	}

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return value > -1 && value % 1 == 0 && value < length;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * A fallback implementation of `Object.keys` which creates an array of the
	 * own enumerable property names of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function shimKeys(object) {
	  var props = keysIn(object),
	      propsLength = props.length,
	      length = propsLength && object.length;

	  var allowIndexes = !!length && isLength(length) &&
	    (isArray(object) || isArguments(object));

	  var index = -1,
	      result = [];

	  while (++index < propsLength) {
	    var key = props[index];
	    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	var keys = !nativeKeys ? shimKeys : function(object) {
	  var Ctor = object == null ? undefined : object.constructor;
	  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	      (typeof object != 'function' && isArrayLike(object))) {
	    return shimKeys(object);
	  }
	  return isObject(object) ? nativeKeys(object) : [];
	};

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  if (object == null) {
	    return [];
	  }
	  if (!isObject(object)) {
	    object = Object(object);
	  }
	  var length = object.length;
	  length = (length && isLength(length) &&
	    (isArray(object) || isArguments(object)) && length) || 0;

	  var Ctor = object.constructor,
	      index = -1,
	      isProto = typeof Ctor == 'function' && Ctor.prototype === object,
	      result = Array(length),
	      skipIndexes = length > 0;

	  while (++index < length) {
	    result[index] = (index + '');
	  }
	  for (var key in object) {
	    if (!(skipIndexes && isIndex(key, length)) &&
	        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = keys;


/***/ },
/* 44 */
/***/ function(module, exports) {

	/**
	 * lodash 3.9.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/** `Object#toString` result references. */
	var funcTag = '[object Function]';

	/** Used to detect host constructors (Safari > 5). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/**
	 * Checks if `value` is object-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var fnToString = Function.prototype.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object == null ? undefined : object[key];
	  return isNative(value) ? value : undefined;
	}

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in older versions of Chrome and Safari which return 'function' for regexes
	  // and Safari 8 equivalents which return 'object' for typed array constructors.
	  return isObject(value) && objToString.call(value) == funcTag;
	}

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (value == null) {
	    return false;
	  }
	  if (isFunction(value)) {
	    return reIsNative.test(fnToString.call(value));
	  }
	  return isObjectLike(value) && reIsHostCtor.test(value);
	}

	module.exports = getNative;


/***/ },
/* 45 */
/***/ function(module, exports) {

	/**
	 * lodash 3.0.7 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	 * that affects Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
	    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	}

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null &&
	    !(typeof value == 'function' && isFunction(value)) && isLength(getLength(value));
	}

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object, else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8 which returns 'object' for typed array constructors, and
	  // PhantomJS 1.9 which returns 'function' for `NodeList` instances.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	module.exports = isArguments;


/***/ },
/* 46 */
/***/ function(module, exports) {

	/**
	 * lodash 3.0.4 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/** `Object#toString` result references. */
	var arrayTag = '[object Array]',
	    funcTag = '[object Function]';

	/** Used to detect host constructors (Safari > 5). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/**
	 * Checks if `value` is object-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var fnToString = Function.prototype.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeIsArray = getNative(Array, 'isArray');

	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object == null ? undefined : object[key];
	  return isNative(value) ? value : undefined;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(function() { return arguments; }());
	 * // => false
	 */
	var isArray = nativeIsArray || function(value) {
	  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	};

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in older versions of Chrome and Safari which return 'function' for regexes
	  // and Safari 8 equivalents which return 'object' for typed array constructors.
	  return isObject(value) && objToString.call(value) == funcTag;
	}

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (value == null) {
	    return false;
	  }
	  if (isFunction(value)) {
	    return reIsNative.test(fnToString.call(value));
	  }
	  return isObjectLike(value) && reIsHostCtor.test(value);
	}

	module.exports = isArray;


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * lodash 3.1.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	var bindCallback = __webpack_require__(48),
	    isIterateeCall = __webpack_require__(49),
	    restParam = __webpack_require__(50);

	/**
	 * Creates a function that assigns properties of source object(s) to a given
	 * destination object.
	 *
	 * **Note:** This function is used to create `_.assign`, `_.defaults`, and `_.merge`.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @returns {Function} Returns the new assigner function.
	 */
	function createAssigner(assigner) {
	  return restParam(function(object, sources) {
	    var index = -1,
	        length = object == null ? 0 : sources.length,
	        customizer = length > 2 ? sources[length - 2] : undefined,
	        guard = length > 2 ? sources[2] : undefined,
	        thisArg = length > 1 ? sources[length - 1] : undefined;

	    if (typeof customizer == 'function') {
	      customizer = bindCallback(customizer, thisArg, 5);
	      length -= 2;
	    } else {
	      customizer = typeof thisArg == 'function' ? thisArg : undefined;
	      length -= (customizer ? 1 : 0);
	    }
	    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	      customizer = length < 3 ? undefined : customizer;
	      length = 1;
	    }
	    while (++index < length) {
	      var source = sources[index];
	      if (source) {
	        assigner(object, source, customizer);
	      }
	    }
	    return object;
	  });
	}

	module.exports = createAssigner;


/***/ },
/* 48 */
/***/ function(module, exports) {

	/**
	 * lodash 3.0.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/**
	 * A specialized version of `baseCallback` which only supports `this` binding
	 * and specifying the number of arguments to provide to `func`.
	 *
	 * @private
	 * @param {Function} func The function to bind.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {number} [argCount] The number of arguments to provide to `func`.
	 * @returns {Function} Returns the callback.
	 */
	function bindCallback(func, thisArg, argCount) {
	  if (typeof func != 'function') {
	    return identity;
	  }
	  if (thisArg === undefined) {
	    return func;
	  }
	  switch (argCount) {
	    case 1: return function(value) {
	      return func.call(thisArg, value);
	    };
	    case 3: return function(value, index, collection) {
	      return func.call(thisArg, value, index, collection);
	    };
	    case 4: return function(accumulator, value, index, collection) {
	      return func.call(thisArg, accumulator, value, index, collection);
	    };
	    case 5: return function(value, other, key, object, source) {
	      return func.call(thisArg, value, other, key, object, source);
	    };
	  }
	  return function() {
	    return func.apply(thisArg, arguments);
	  };
	}

	/**
	 * This method returns the first argument provided to it.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 *
	 * _.identity(object) === object;
	 * // => true
	 */
	function identity(value) {
	  return value;
	}

	module.exports = bindCallback;


/***/ },
/* 49 */
/***/ function(module, exports) {

	/**
	 * lodash 3.0.9 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/** Used to detect unsigned integer values. */
	var reIsUint = /^\d+$/;

	/**
	 * Used as the [maximum length](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	 * that affects Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');

	/**
	 * Checks if `value` is array-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 */
	function isArrayLike(value) {
	  return value != null && isLength(getLength(value));
	}

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return value > -1 && value % 1 == 0 && value < length;
	}

	/**
	 * Checks if the provided arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number'
	      ? (isArrayLike(object) && isIndex(index, object.length))
	      : (type == 'string' && index in object)) {
	    var other = object[index];
	    return value === value ? (value === other) : (other !== other);
	  }
	  return false;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is based on [`ToLength`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength).
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	module.exports = isIterateeCall;


/***/ },
/* 50 */
/***/ function(module, exports) {

	/**
	 * lodash 3.6.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * Creates a function that invokes `func` with the `this` binding of the
	 * created function and arguments from `start` and beyond provided as an array.
	 *
	 * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var say = _.restParam(function(what, names) {
	 *   return what + ' ' + _.initial(names).join(', ') +
	 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	 * });
	 *
	 * say('hello', 'fred', 'barney', 'pebbles');
	 * // => 'hello fred, barney, & pebbles'
	 */
	function restParam(func, start) {
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        rest = Array(length);

	    while (++index < length) {
	      rest[index] = args[start + index];
	    }
	    switch (start) {
	      case 0: return func.call(this, rest);
	      case 1: return func.call(this, args[0], rest);
	      case 2: return func.call(this, args[0], args[1], rest);
	    }
	    var otherArgs = Array(start + 1);
	    index = -1;
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = rest;
	    return func.apply(this, otherArgs);
	  };
	}

	module.exports = restParam;


/***/ },
/* 51 */
/***/ function(module, exports) {

	var _element = typeof document !== 'undefined' ? document.body : null;

	function setElement(element) {
	  if (typeof element === 'string') {
	    var el = document.querySelectorAll(element);
	    element = 'length' in el ? el[0] : el;
	  }
	  _element = element || _element;
	}

	function hide(appElement) {
	  validateElement(appElement);
	  (appElement || _element).setAttribute('aria-hidden', 'true');
	}

	function show(appElement) {
	  validateElement(appElement);
	  (appElement || _element).removeAttribute('aria-hidden');
	}

	function toggle(shouldHide, appElement) {
	  if (shouldHide)
	    hide(appElement);
	  else
	    show(appElement);
	}

	function validateElement(appElement) {
	  if (!appElement && !_element)
	    throw new Error('react-modal: You must set an element with `Modal.setAppElement(el)` to make this accessible');
	}

	function resetForTesting() {
	  _element = document.body;
	}

	exports.toggle = toggle;
	exports.setElement = setElement;
	exports.show = show;
	exports.hide = hide;
	exports.resetForTesting = resetForTesting;


/***/ },
/* 52 */
/***/ function(module, exports) {

	module.exports = function(opts) {
	  return new ElementClass(opts)
	}

	function indexOf(arr, prop) {
	  if (arr.indexOf) return arr.indexOf(prop)
	  for (var i = 0, len = arr.length; i < len; i++)
	    if (arr[i] === prop) return i
	  return -1
	}

	function ElementClass(opts) {
	  if (!(this instanceof ElementClass)) return new ElementClass(opts)
	  var self = this
	  if (!opts) opts = {}

	  // similar doing instanceof HTMLElement but works in IE8
	  if (opts.nodeType) opts = {el: opts}

	  this.opts = opts
	  this.el = opts.el || document.body
	  if (typeof this.el !== 'object') this.el = document.querySelector(this.el)
	}

	ElementClass.prototype.add = function(className) {
	  var el = this.el
	  if (!el) return
	  if (el.className === "") return el.className = className
	  var classes = el.className.split(' ')
	  if (indexOf(classes, className) > -1) return classes
	  classes.push(className)
	  el.className = classes.join(' ')
	  return classes
	}

	ElementClass.prototype.remove = function(className) {
	  var el = this.el
	  if (!el) return
	  if (el.className === "") return
	  var classes = el.className.split(' ')
	  var idx = indexOf(classes, className)
	  if (idx > -1) classes.splice(idx, 1)
	  el.className = classes.join(' ')
	  return classes
	}

	ElementClass.prototype.has = function(className) {
	  var el = this.el
	  if (!el) return
	  var classes = el.className.split(' ')
	  return indexOf(classes, className) > -1
	}

	ElementClass.prototype.toggle = function(className) {
	  var el = this.el
	  if (!el) return
	  if (this.has(className)) this.remove(className)
	  else this.add(className)
	}


/***/ }
/******/ ]);