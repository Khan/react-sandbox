// Generated by webpack
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("React"), require("ReactDOM"));
	else if(typeof define === 'function' && define.amd)
		define(["React", "ReactDOM"], factory);
	else if(typeof exports === 'object')
		exports["ReactSandbox"] = factory(require("React"), require("ReactDOM"));
	else
		root["ReactSandbox"] = factory(root["React"], root["ReactDOM"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_35__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Root component of the React Sandbox.
	 */

	// TODO(jlfwong):
	//  - PropType introspection
	//  - Prop editing
	//  - Prop generation
	//  - Autocomplete component selection
	//  - Speed up JS package compilation...?
	//  - Resizable prop editor
	//  - Generate code
	//  - Tests

	"use strict";

	var React = __webpack_require__(2);

	var _require = __webpack_require__(3);

	var Provider = _require.Provider;
	var connect = _require.connect;

	var _require2 = __webpack_require__(24);

	var StyleSheet = _require2.StyleSheet;
	var css = _require2.css;

	var PropTypeTools = __webpack_require__(30);
	var SandboxDisplay = __webpack_require__(31);
	var actions = __webpack_require__(37);
	var createSandboxStore = __webpack_require__(39);

	var RP = React.PropTypes;

	var mapStateToProps = function mapStateToProps(state) {
	    return {
	        componentList: state.componentList,
	        selectedComponent: state.selectedComponent
	    };
	};

	var mapDispatchToProps = function mapDispatchToProps(dispatch, ownProps) {
	    return {
	        onComponentSelect: function onComponentSelect(key) {
	            dispatch(actions.selectComponent(key, ownProps.getComponentReference, ownProps.getFixtureListReference));
	        },

	        onFixtureUpdate: function onFixtureUpdate() {
	            dispatch(actions.updateFixture.apply(actions, arguments));
	        },

	        onFixtureAdd: function onFixtureAdd() {
	            dispatch(actions.addFixture.apply(actions, arguments));
	        }
	    };
	};

	var ConnectedSandboxDisplay = connect(mapStateToProps, mapDispatchToProps)(SandboxDisplay);

	var patchReactWithFakeErrorBoundaries = function patchReactWithFakeErrorBoundaries() {
	    // We patch React.createClass as a temporary work around for the
	    // lack of error boundaries. When React 15 lands, we can delete this
	    // and use real error boundaries.
	    if (React.__patchedBySandboxForFakeErrorBoundaries) {
	        return;
	    }
	    React.__patchedBySandboxForFakeErrorBoundaries = true;

	    var origCreateClass = React.createClass;
	    React.createClass = function () {
	        var clazz = origCreateClass.apply(undefined, arguments);

	        var render = clazz.prototype.render;

	        clazz.prototype.render = function () {
	            try {
	                return render.call(this);
	            } catch (e) {
	                return React.createElement(
	                    "pre",
	                    { className: css(styles.errorBox) },
	                    e.stack
	                );
	            }
	        };

	        return clazz;
	    };

	    var styles = StyleSheet.create({
	        errorBox: {
	            background: 'red',
	            color: 'black',
	            whiteSpace: 'pre',
	            textAlign: 'left'
	        }
	    });
	};

	var Sandbox = React.createClass({
	    displayName: "Sandbox",

	    propTypes: {
	        // Returns a list of [label, key] pairs, one per component loadable in
	        // the sandbox.
	        //
	        // "label" will be what you'd like to have displayed in the dropdown.
	        // "key" will be passed to getComponentReference to load the associated
	        // comopnent. Could be e.g. the path to the component. Will not be
	        // displayed to the user.
	        getComponentList: RP.func.isRequired,

	        // Given a "key" as specified in getComponentList, return a promise
	        // resolving to a JS reference to the React component constructor.
	        //
	        // Calling this should reload the file containing the definition of the
	        // component. This allows the Sandbox to monkey patch React before
	        // React.PropTypes is referenced in the React component definition.
	        //
	        // e.g. in webpack, this should be something roughly like:
	        //
	        //  delete require.cache[require.resolve(pathToComponent)];
	        //  return require(pathToComponent);
	        getComponentReference: RP.func.isRequired,

	        // Given a "key" as specified in getComponentList, return a promise
	        // resolving to a JS reference to a list of fixtures. See
	        // SandboxDisplay.PropTypes for the structure of fixtures.
	        getFixtureListReference: RP.func,

	        // URL root of the React sandbox. If specified, will use client-side
	        // routing to allow specifying the component to view. Should include
	        // the leading slash but not a trailing slash, e.g. "/react-sandbox".
	        urlRoot: RP.string

	    },

	    // saveFixtureList: RP.func,
	    componentWillMount: function componentWillMount() {
	        this.store = createSandboxStore();
	        PropTypeTools.patch(RP);

	        patchReactWithFakeErrorBoundaries();
	    },

	    componentDidMount: function componentDidMount() {
	        var _this = this;

	        var _props = this.props;
	        var getComponentList = _props.getComponentList;
	        var getComponentReference = _props.getComponentReference;
	        var getFixtureListReference = _props.getFixtureListReference;
	        var urlRoot = _props.urlRoot;

	        this.store.dispatch(actions.loadComponentList(getComponentList));

	        if (urlRoot) {
	            // TODO(jlfwong): If this needs to get more complicated than this,
	            // should probably pull in a real routing library.

	            if (window.location.pathname.indexOf(urlRoot + "/") === 0) {
	                var componentKey = window.location.pathname.substr((urlRoot + "/").length);
	                if (componentKey.length > 0) {
	                    this.store.dispatch(actions.selectComponent(componentKey, getComponentReference, getFixtureListReference));
	                }
	            }

	            // TODO(jlfwong): Deal with popstate, then switch the below to
	            // pushState

	            // Update the URL when the selected component changes
	            this.store.subscribe(function () {
	                var _store$getState = _this.store.getState();

	                var selectedComponent = _store$getState.selectedComponent;

	                if (selectedComponent) {
	                    window.history.replaceState({}, window.title, urlRoot + "/" + selectedComponent.key);
	                } else {
	                    window.history.replaceState({}, window.title, urlRoot);
	                }
	            });
	        }
	    },

	    render: function render() {
	        var _props2 = this.props;
	        var getComponentReference = _props2.getComponentReference;
	        var getFixtureListReference = _props2.getFixtureListReference;

	        return React.createElement(
	            Provider,
	            { store: this.store },
	            React.createElement(ConnectedSandboxDisplay, {
	                getComponentReference: getComponentReference,
	                getFixtureListReference: getFixtureListReference,
	                generator: PropTypeTools.generateRandomValueForType
	            })
	        );
	    }
	});

	module.exports = Sandbox;

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _componentsCreateAll = __webpack_require__(4);

	var _componentsCreateAll2 = _interopRequireDefault(_componentsCreateAll);

	var _createAll = _componentsCreateAll2['default'](_react2['default']);

	var Provider = _createAll.Provider;
	var connect = _createAll.connect;
	exports.Provider = Provider;
	exports.connect = connect;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = createAll;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _createProvider = __webpack_require__(5);

	var _createProvider2 = _interopRequireDefault(_createProvider);

	var _createConnect = __webpack_require__(7);

	var _createConnect2 = _interopRequireDefault(_createConnect);

	function createAll(React) {
	  var Provider = _createProvider2['default'](React);
	  var connect = _createConnect2['default'](React);

	  return { Provider: Provider, connect: connect };
	}

	module.exports = exports['default'];

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = createProvider;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _utilsCreateStoreShape = __webpack_require__(6);

	var _utilsCreateStoreShape2 = _interopRequireDefault(_utilsCreateStoreShape);

	function isUsingOwnerContext(React) {
	  var version = React.version;

	  if (typeof version !== 'string') {
	    return true;
	  }

	  var sections = version.split('.');
	  var major = parseInt(sections[0], 10);
	  var minor = parseInt(sections[1], 10);

	  return major === 0 && minor === 13;
	}

	function createProvider(React) {
	  var Component = React.Component;
	  var PropTypes = React.PropTypes;
	  var Children = React.Children;

	  var storeShape = _utilsCreateStoreShape2['default'](PropTypes);
	  var requireFunctionChild = isUsingOwnerContext(React);

	  var didWarnAboutChild = false;
	  function warnAboutFunctionChild() {
	    if (didWarnAboutChild || requireFunctionChild) {
	      return;
	    }

	    didWarnAboutChild = true;
	    console.error( // eslint-disable-line no-console
	    'With React 0.14 and later versions, you no longer need to ' + 'wrap <Provider> child into a function.');
	  }
	  function warnAboutElementChild() {
	    if (didWarnAboutChild || !requireFunctionChild) {
	      return;
	    }

	    didWarnAboutChild = true;
	    console.error( // eslint-disable-line no-console
	    'With React 0.13, you need to ' + 'wrap <Provider> child into a function. ' + 'This restriction will be removed with React 0.14.');
	  }

	  var didWarnAboutReceivingStore = false;
	  function warnAboutReceivingStore() {
	    if (didWarnAboutReceivingStore) {
	      return;
	    }

	    didWarnAboutReceivingStore = true;
	    console.error( // eslint-disable-line no-console
	    '<Provider> does not support changing `store` on the fly. ' + 'It is most likely that you see this error because you updated to ' + 'Redux 2.x and React Redux 2.x which no longer hot reload reducers ' + 'automatically. See https://github.com/rackt/react-redux/releases/' + 'tag/v2.0.0 for the migration instructions.');
	  }

	  var Provider = (function (_Component) {
	    _inherits(Provider, _Component);

	    Provider.prototype.getChildContext = function getChildContext() {
	      return { store: this.store };
	    };

	    function Provider(props, context) {
	      _classCallCheck(this, Provider);

	      _Component.call(this, props, context);
	      this.store = props.store;
	    }

	    Provider.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	      var store = this.store;
	      var nextStore = nextProps.store;

	      if (store !== nextStore) {
	        warnAboutReceivingStore();
	      }
	    };

	    Provider.prototype.render = function render() {
	      var children = this.props.children;

	      if (typeof children === 'function') {
	        warnAboutFunctionChild();
	        children = children();
	      } else {
	        warnAboutElementChild();
	      }

	      return Children.only(children);
	    };

	    return Provider;
	  })(Component);

	  Provider.childContextTypes = {
	    store: storeShape.isRequired
	  };
	  Provider.propTypes = {
	    store: storeShape.isRequired,
	    children: (requireFunctionChild ? PropTypes.func : PropTypes.element).isRequired
	  };

	  return Provider;
	}

	module.exports = exports['default'];

/***/ },
/* 6 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = createStoreShape;

	function createStoreShape(PropTypes) {
	  return PropTypes.shape({
	    subscribe: PropTypes.func.isRequired,
	    dispatch: PropTypes.func.isRequired,
	    getState: PropTypes.func.isRequired
	  });
	}

	module.exports = exports["default"];

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports['default'] = createConnect;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _utilsCreateStoreShape = __webpack_require__(6);

	var _utilsCreateStoreShape2 = _interopRequireDefault(_utilsCreateStoreShape);

	var _utilsShallowEqual = __webpack_require__(9);

	var _utilsShallowEqual2 = _interopRequireDefault(_utilsShallowEqual);

	var _utilsIsPlainObject = __webpack_require__(10);

	var _utilsIsPlainObject2 = _interopRequireDefault(_utilsIsPlainObject);

	var _utilsWrapActionCreators = __webpack_require__(11);

	var _utilsWrapActionCreators2 = _interopRequireDefault(_utilsWrapActionCreators);

	var _hoistNonReactStatics = __webpack_require__(22);

	var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

	var _invariant = __webpack_require__(23);

	var _invariant2 = _interopRequireDefault(_invariant);

	var defaultMapStateToProps = function defaultMapStateToProps() {
	  return {};
	};
	var defaultMapDispatchToProps = function defaultMapDispatchToProps(dispatch) {
	  return { dispatch: dispatch };
	};
	var defaultMergeProps = function defaultMergeProps(stateProps, dispatchProps, parentProps) {
	  return _extends({}, parentProps, stateProps, dispatchProps);
	};

	function getDisplayName(Component) {
	  return Component.displayName || Component.name || 'Component';
	}

	// Helps track hot reloading.
	var nextVersion = 0;

	function createConnect(React) {
	  var Component = React.Component;
	  var PropTypes = React.PropTypes;

	  var storeShape = _utilsCreateStoreShape2['default'](PropTypes);

	  return function connect(mapStateToProps, mapDispatchToProps, mergeProps) {
	    var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

	    var shouldSubscribe = Boolean(mapStateToProps);
	    var finalMapStateToProps = mapStateToProps || defaultMapStateToProps;
	    var finalMapDispatchToProps = _utilsIsPlainObject2['default'](mapDispatchToProps) ? _utilsWrapActionCreators2['default'](mapDispatchToProps) : mapDispatchToProps || defaultMapDispatchToProps;
	    var finalMergeProps = mergeProps || defaultMergeProps;
	    var shouldUpdateStateProps = finalMapStateToProps.length > 1;
	    var shouldUpdateDispatchProps = finalMapDispatchToProps.length > 1;
	    var _options$pure = options.pure;
	    var pure = _options$pure === undefined ? true : _options$pure;

	    // Helps track hot reloading.
	    var version = nextVersion++;

	    function computeStateProps(store, props) {
	      var state = store.getState();
	      var stateProps = shouldUpdateStateProps ? finalMapStateToProps(state, props) : finalMapStateToProps(state);

	      _invariant2['default'](_utilsIsPlainObject2['default'](stateProps), '`mapStateToProps` must return an object. Instead received %s.', stateProps);
	      return stateProps;
	    }

	    function computeDispatchProps(store, props) {
	      var dispatch = store.dispatch;

	      var dispatchProps = shouldUpdateDispatchProps ? finalMapDispatchToProps(dispatch, props) : finalMapDispatchToProps(dispatch);

	      _invariant2['default'](_utilsIsPlainObject2['default'](dispatchProps), '`mapDispatchToProps` must return an object. Instead received %s.', dispatchProps);
	      return dispatchProps;
	    }

	    function _computeNextState(stateProps, dispatchProps, parentProps) {
	      var mergedProps = finalMergeProps(stateProps, dispatchProps, parentProps);
	      _invariant2['default'](_utilsIsPlainObject2['default'](mergedProps), '`mergeProps` must return an object. Instead received %s.', mergedProps);
	      return mergedProps;
	    }

	    return function wrapWithConnect(WrappedComponent) {
	      var Connect = (function (_Component) {
	        _inherits(Connect, _Component);

	        Connect.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
	          if (!pure) {
	            this.updateStateProps(nextProps);
	            this.updateDispatchProps(nextProps);
	            this.updateState(nextProps);
	            return true;
	          }

	          var storeChanged = nextState.storeState !== this.state.storeState;
	          var propsChanged = !_utilsShallowEqual2['default'](nextProps, this.props);
	          var mapStateProducedChange = false;
	          var dispatchPropsChanged = false;

	          if (storeChanged || propsChanged && shouldUpdateStateProps) {
	            mapStateProducedChange = this.updateStateProps(nextProps);
	          }

	          if (propsChanged && shouldUpdateDispatchProps) {
	            dispatchPropsChanged = this.updateDispatchProps(nextProps);
	          }

	          if (propsChanged || mapStateProducedChange || dispatchPropsChanged) {
	            this.updateState(nextProps);
	            return true;
	          }

	          return false;
	        };

	        function Connect(props, context) {
	          _classCallCheck(this, Connect);

	          _Component.call(this, props, context);
	          this.version = version;
	          this.store = props.store || context.store;

	          _invariant2['default'](this.store, 'Could not find "store" in either the context or ' + ('props of "' + this.constructor.displayName + '". ') + 'Either wrap the root component in a <Provider>, ' + ('or explicitly pass "store" as a prop to "' + this.constructor.displayName + '".'));

	          this.stateProps = computeStateProps(this.store, props);
	          this.dispatchProps = computeDispatchProps(this.store, props);
	          this.state = { storeState: null };
	          this.updateState();
	        }

	        Connect.prototype.computeNextState = function computeNextState() {
	          var props = arguments.length <= 0 || arguments[0] === undefined ? this.props : arguments[0];

	          return _computeNextState(this.stateProps, this.dispatchProps, props);
	        };

	        Connect.prototype.updateStateProps = function updateStateProps() {
	          var props = arguments.length <= 0 || arguments[0] === undefined ? this.props : arguments[0];

	          var nextStateProps = computeStateProps(this.store, props);
	          if (_utilsShallowEqual2['default'](nextStateProps, this.stateProps)) {
	            return false;
	          }

	          this.stateProps = nextStateProps;
	          return true;
	        };

	        Connect.prototype.updateDispatchProps = function updateDispatchProps() {
	          var props = arguments.length <= 0 || arguments[0] === undefined ? this.props : arguments[0];

	          var nextDispatchProps = computeDispatchProps(this.store, props);
	          if (_utilsShallowEqual2['default'](nextDispatchProps, this.dispatchProps)) {
	            return false;
	          }

	          this.dispatchProps = nextDispatchProps;
	          return true;
	        };

	        Connect.prototype.updateState = function updateState() {
	          var props = arguments.length <= 0 || arguments[0] === undefined ? this.props : arguments[0];

	          this.nextState = this.computeNextState(props);
	        };

	        Connect.prototype.isSubscribed = function isSubscribed() {
	          return typeof this.unsubscribe === 'function';
	        };

	        Connect.prototype.trySubscribe = function trySubscribe() {
	          if (shouldSubscribe && !this.unsubscribe) {
	            this.unsubscribe = this.store.subscribe(this.handleChange.bind(this));
	            this.handleChange();
	          }
	        };

	        Connect.prototype.tryUnsubscribe = function tryUnsubscribe() {
	          if (this.unsubscribe) {
	            this.unsubscribe();
	            this.unsubscribe = null;
	          }
	        };

	        Connect.prototype.componentDidMount = function componentDidMount() {
	          this.trySubscribe();
	        };

	        Connect.prototype.componentWillUnmount = function componentWillUnmount() {
	          this.tryUnsubscribe();
	        };

	        Connect.prototype.handleChange = function handleChange() {
	          if (!this.unsubscribe) {
	            return;
	          }

	          this.setState({
	            storeState: this.store.getState()
	          });
	        };

	        Connect.prototype.getWrappedInstance = function getWrappedInstance() {
	          return this.refs.wrappedInstance;
	        };

	        Connect.prototype.render = function render() {
	          return React.createElement(WrappedComponent, _extends({ ref: 'wrappedInstance'
	          }, this.nextState));
	        };

	        return Connect;
	      })(Component);

	      Connect.displayName = 'Connect(' + getDisplayName(WrappedComponent) + ')';
	      Connect.WrappedComponent = WrappedComponent;
	      Connect.contextTypes = {
	        store: storeShape
	      };
	      Connect.propTypes = {
	        store: storeShape
	      };

	      if (process.env.NODE_ENV !== 'production') {
	        Connect.prototype.componentWillUpdate = function componentWillUpdate() {
	          if (this.version === version) {
	            return;
	          }

	          // We are hot reloading!
	          this.version = version;

	          // Update the state and bindings.
	          this.trySubscribe();
	          this.updateStateProps();
	          this.updateDispatchProps();
	          this.updateState();
	        };
	      }

	      return _hoistNonReactStatics2['default'](Connect, WrappedComponent);
	    };
	  };
	}

	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 8 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 9 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = shallowEqual;

	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  var hasOwn = Object.prototype.hasOwnProperty;
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwn.call(objB, keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = exports["default"];

/***/ },
/* 10 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = isPlainObject;
	var fnToString = function fnToString(fn) {
	  return Function.prototype.toString.call(fn);
	};

	/**
	 * @param {any} obj The object to inspect.
	 * @returns {boolean} True if the argument appears to be a plain object.
	 */

	function isPlainObject(obj) {
	  if (!obj || typeof obj !== 'object') {
	    return false;
	  }

	  var proto = typeof obj.constructor === 'function' ? Object.getPrototypeOf(obj) : Object.prototype;

	  if (proto === null) {
	    return true;
	  }

	  var constructor = proto.constructor;

	  return typeof constructor === 'function' && constructor instanceof constructor && fnToString(constructor) === fnToString(Object);
	}

	module.exports = exports['default'];

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = wrapActionCreators;

	var _redux = __webpack_require__(12);

	function wrapActionCreators(actionCreators) {
	  return function (dispatch) {
	    return _redux.bindActionCreators(actionCreators, dispatch);
	  };
	}

	module.exports = exports['default'];

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.compose = exports.applyMiddleware = exports.bindActionCreators = exports.combineReducers = exports.createStore = undefined;

	var _createStore = __webpack_require__(13);

	var _createStore2 = _interopRequireDefault(_createStore);

	var _combineReducers = __webpack_require__(17);

	var _combineReducers2 = _interopRequireDefault(_combineReducers);

	var _bindActionCreators = __webpack_require__(19);

	var _bindActionCreators2 = _interopRequireDefault(_bindActionCreators);

	var _applyMiddleware = __webpack_require__(20);

	var _applyMiddleware2 = _interopRequireDefault(_applyMiddleware);

	var _compose = __webpack_require__(21);

	var _compose2 = _interopRequireDefault(_compose);

	var _warning = __webpack_require__(18);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/*
	* This is a dummy function to check if the function name has been altered by minification.
	* If the function has been minified and NODE_ENV !== 'production', warn the user.
	*/
	function isCrushed() {}

	if (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
	  (0, _warning2["default"])('You are currently using minified code outside of NODE_ENV === \'production\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');
	}

	exports.createStore = _createStore2["default"];
	exports.combineReducers = _combineReducers2["default"];
	exports.bindActionCreators = _bindActionCreators2["default"];
	exports.applyMiddleware = _applyMiddleware2["default"];
	exports.compose = _compose2["default"];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.ActionTypes = undefined;
	exports["default"] = createStore;

	var _isPlainObject = __webpack_require__(14);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/**
	 * These are private action types reserved by Redux.
	 * For any unknown actions, you must return the current state.
	 * If the current state is undefined, you must return the initial state.
	 * Do not reference these action types directly in your code.
	 */
	var ActionTypes = exports.ActionTypes = {
	  INIT: '@@redux/INIT'
	};

	/**
	 * Creates a Redux store that holds the state tree.
	 * The only way to change the data in the store is to call `dispatch()` on it.
	 *
	 * There should only be a single store in your app. To specify how different
	 * parts of the state tree respond to actions, you may combine several reducers
	 * into a single reducer function by using `combineReducers`.
	 *
	 * @param {Function} reducer A function that returns the next state tree, given
	 * the current state tree and the action to handle.
	 *
	 * @param {any} [initialState] The initial state. You may optionally specify it
	 * to hydrate the state from the server in universal apps, or to restore a
	 * previously serialized user session.
	 * If you use `combineReducers` to produce the root reducer function, this must be
	 * an object with the same shape as `combineReducers` keys.
	 *
	 * @param {Function} enhancer The store enhancer. You may optionally specify it
	 * to enhance the store with third-party capabilities such as middleware,
	 * time travel, persistence, etc. The only store enhancer that ships with Redux
	 * is `applyMiddleware()`.
	 *
	 * @returns {Store} A Redux store that lets you read the state, dispatch actions
	 * and subscribe to changes.
	 */
	function createStore(reducer, initialState, enhancer) {
	  if (typeof initialState === 'function' && typeof enhancer === 'undefined') {
	    enhancer = initialState;
	    initialState = undefined;
	  }

	  if (typeof enhancer !== 'undefined') {
	    if (typeof enhancer !== 'function') {
	      throw new Error('Expected the enhancer to be a function.');
	    }

	    return enhancer(createStore)(reducer, initialState);
	  }

	  if (typeof reducer !== 'function') {
	    throw new Error('Expected the reducer to be a function.');
	  }

	  var currentReducer = reducer;
	  var currentState = initialState;
	  var currentListeners = [];
	  var nextListeners = currentListeners;
	  var isDispatching = false;

	  function ensureCanMutateNextListeners() {
	    if (nextListeners === currentListeners) {
	      nextListeners = currentListeners.slice();
	    }
	  }

	  /**
	   * Reads the state tree managed by the store.
	   *
	   * @returns {any} The current state tree of your application.
	   */
	  function getState() {
	    return currentState;
	  }

	  /**
	   * Adds a change listener. It will be called any time an action is dispatched,
	   * and some part of the state tree may potentially have changed. You may then
	   * call `getState()` to read the current state tree inside the callback.
	   *
	   * You may call `dispatch()` from a change listener, with the following
	   * caveats:
	   *
	   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
	   * If you subscribe or unsubscribe while the listeners are being invoked, this
	   * will not have any effect on the `dispatch()` that is currently in progress.
	   * However, the next `dispatch()` call, whether nested or not, will use a more
	   * recent snapshot of the subscription list.
	   *
	   * 2. The listener should not expect to see all states changes, as the state
	   * might have been updated multiple times during a nested `dispatch()` before
	   * the listener is called. It is, however, guaranteed that all subscribers
	   * registered before the `dispatch()` started will be called with the latest
	   * state by the time it exits.
	   *
	   * @param {Function} listener A callback to be invoked on every dispatch.
	   * @returns {Function} A function to remove this change listener.
	   */
	  function subscribe(listener) {
	    if (typeof listener !== 'function') {
	      throw new Error('Expected listener to be a function.');
	    }

	    var isSubscribed = true;

	    ensureCanMutateNextListeners();
	    nextListeners.push(listener);

	    return function unsubscribe() {
	      if (!isSubscribed) {
	        return;
	      }

	      isSubscribed = false;

	      ensureCanMutateNextListeners();
	      var index = nextListeners.indexOf(listener);
	      nextListeners.splice(index, 1);
	    };
	  }

	  /**
	   * Dispatches an action. It is the only way to trigger a state change.
	   *
	   * The `reducer` function, used to create the store, will be called with the
	   * current state tree and the given `action`. Its return value will
	   * be considered the **next** state of the tree, and the change listeners
	   * will be notified.
	   *
	   * The base implementation only supports plain object actions. If you want to
	   * dispatch a Promise, an Observable, a thunk, or something else, you need to
	   * wrap your store creating function into the corresponding middleware. For
	   * example, see the documentation for the `redux-thunk` package. Even the
	   * middleware will eventually dispatch plain object actions using this method.
	   *
	   * @param {Object} action A plain object representing “what changed”. It is
	   * a good idea to keep actions serializable so you can record and replay user
	   * sessions, or use the time travelling `redux-devtools`. An action must have
	   * a `type` property which may not be `undefined`. It is a good idea to use
	   * string constants for action types.
	   *
	   * @returns {Object} For convenience, the same action object you dispatched.
	   *
	   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
	   * return something else (for example, a Promise you can await).
	   */
	  function dispatch(action) {
	    if (!(0, _isPlainObject2["default"])(action)) {
	      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
	    }

	    if (typeof action.type === 'undefined') {
	      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
	    }

	    if (isDispatching) {
	      throw new Error('Reducers may not dispatch actions.');
	    }

	    try {
	      isDispatching = true;
	      currentState = currentReducer(currentState, action);
	    } finally {
	      isDispatching = false;
	    }

	    var listeners = currentListeners = nextListeners;
	    for (var i = 0; i < listeners.length; i++) {
	      listeners[i]();
	    }

	    return action;
	  }

	  /**
	   * Replaces the reducer currently used by the store to calculate the state.
	   *
	   * You might need this if your app implements code splitting and you want to
	   * load some of the reducers dynamically. You might also need this if you
	   * implement a hot reloading mechanism for Redux.
	   *
	   * @param {Function} nextReducer The reducer for the store to use instead.
	   * @returns {void}
	   */
	  function replaceReducer(nextReducer) {
	    if (typeof nextReducer !== 'function') {
	      throw new Error('Expected the nextReducer to be a function.');
	    }

	    currentReducer = nextReducer;
	    dispatch({ type: ActionTypes.INIT });
	  }

	  // When a store is created, an "INIT" action is dispatched so that every
	  // reducer returns their initial state. This effectively populates
	  // the initial state tree.
	  dispatch({ type: ActionTypes.INIT });

	  return {
	    dispatch: dispatch,
	    subscribe: subscribe,
	    getState: getState,
	    replaceReducer: replaceReducer
	  };
	}

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	var isHostObject = __webpack_require__(15),
	    isObjectLike = __webpack_require__(16);

	/** `Object#toString` result references. */
	var objectTag = '[object Object]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = Function.prototype.toString;

	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Built-in value references. */
	var getPrototypeOf = Object.getPrototypeOf;

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) ||
	      objectToString.call(value) != objectTag || isHostObject(value)) {
	    return false;
	  }
	  var proto = getPrototypeOf(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = proto.constructor;
	  return (typeof Ctor == 'function' &&
	    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
	}

	module.exports = isPlainObject;


/***/ },
/* 15 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}

	module.exports = isHostObject;


/***/ },
/* 16 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	module.exports = isObjectLike;


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports["default"] = combineReducers;

	var _createStore = __webpack_require__(13);

	var _isPlainObject = __webpack_require__(14);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	var _warning = __webpack_require__(18);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function getUndefinedStateErrorMessage(key, action) {
	  var actionType = action && action.type;
	  var actionName = actionType && '"' + actionType.toString() + '"' || 'an action';

	  return 'Reducer "' + key + '" returned undefined handling ' + actionName + '. ' + 'To ignore an action, you must explicitly return the previous state.';
	}

	function getUnexpectedStateShapeWarningMessage(inputState, reducers, action) {
	  var reducerKeys = Object.keys(reducers);
	  var argumentName = action && action.type === _createStore.ActionTypes.INIT ? 'initialState argument passed to createStore' : 'previous state received by the reducer';

	  if (reducerKeys.length === 0) {
	    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
	  }

	  if (!(0, _isPlainObject2["default"])(inputState)) {
	    return 'The ' + argumentName + ' has unexpected type of "' + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
	  }

	  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
	    return !reducers.hasOwnProperty(key);
	  });

	  if (unexpectedKeys.length > 0) {
	    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
	  }
	}

	function assertReducerSanity(reducers) {
	  Object.keys(reducers).forEach(function (key) {
	    var reducer = reducers[key];
	    var initialState = reducer(undefined, { type: _createStore.ActionTypes.INIT });

	    if (typeof initialState === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined.');
	    }

	    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');
	    if (typeof reducer(undefined, { type: type }) === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + ('Don\'t try to handle ' + _createStore.ActionTypes.INIT + ' or other actions in "redux/*" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined.');
	    }
	  });
	}

	/**
	 * Turns an object whose values are different reducer functions, into a single
	 * reducer function. It will call every child reducer, and gather their results
	 * into a single state object, whose keys correspond to the keys of the passed
	 * reducer functions.
	 *
	 * @param {Object} reducers An object whose values correspond to different
	 * reducer functions that need to be combined into one. One handy way to obtain
	 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
	 * undefined for any action. Instead, they should return their initial state
	 * if the state passed to them was undefined, and the current state for any
	 * unrecognized action.
	 *
	 * @returns {Function} A reducer function that invokes every reducer inside the
	 * passed object, and builds a state object with the same shape.
	 */
	function combineReducers(reducers) {
	  var reducerKeys = Object.keys(reducers);
	  var finalReducers = {};
	  for (var i = 0; i < reducerKeys.length; i++) {
	    var key = reducerKeys[i];
	    if (typeof reducers[key] === 'function') {
	      finalReducers[key] = reducers[key];
	    }
	  }
	  var finalReducerKeys = Object.keys(finalReducers);

	  var sanityError;
	  try {
	    assertReducerSanity(finalReducers);
	  } catch (e) {
	    sanityError = e;
	  }

	  return function combination() {
	    var state = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	    var action = arguments[1];

	    if (sanityError) {
	      throw sanityError;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action);
	      if (warningMessage) {
	        (0, _warning2["default"])(warningMessage);
	      }
	    }

	    var hasChanged = false;
	    var nextState = {};
	    for (var i = 0; i < finalReducerKeys.length; i++) {
	      var key = finalReducerKeys[i];
	      var reducer = finalReducers[key];
	      var previousStateForKey = state[key];
	      var nextStateForKey = reducer(previousStateForKey, action);
	      if (typeof nextStateForKey === 'undefined') {
	        var errorMessage = getUndefinedStateErrorMessage(key, action);
	        throw new Error(errorMessage);
	      }
	      nextState[key] = nextStateForKey;
	      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
	    }
	    return hasChanged ? nextState : state;
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 18 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports["default"] = warning;
	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */
	  try {
	    // This error was thrown as a convenience so that you can use this stack
	    // to find the callsite that caused this warning to fire.
	    throw new Error(message);
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */
	}

/***/ },
/* 19 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports["default"] = bindActionCreators;
	function bindActionCreator(actionCreator, dispatch) {
	  return function () {
	    return dispatch(actionCreator.apply(undefined, arguments));
	  };
	}

	/**
	 * Turns an object whose values are action creators, into an object with the
	 * same keys, but with every function wrapped into a `dispatch` call so they
	 * may be invoked directly. This is just a convenience method, as you can call
	 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
	 *
	 * For convenience, you can also pass a single function as the first argument,
	 * and get a function in return.
	 *
	 * @param {Function|Object} actionCreators An object whose values are action
	 * creator functions. One handy way to obtain it is to use ES6 `import * as`
	 * syntax. You may also pass a single function.
	 *
	 * @param {Function} dispatch The `dispatch` function available on your Redux
	 * store.
	 *
	 * @returns {Function|Object} The object mimicking the original object, but with
	 * every action creator wrapped into the `dispatch` call. If you passed a
	 * function as `actionCreators`, the return value will also be a single
	 * function.
	 */
	function bindActionCreators(actionCreators, dispatch) {
	  if (typeof actionCreators === 'function') {
	    return bindActionCreator(actionCreators, dispatch);
	  }

	  if (typeof actionCreators !== 'object' || actionCreators === null) {
	    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators) + '. ' + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
	  }

	  var keys = Object.keys(actionCreators);
	  var boundActionCreators = {};
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    var actionCreator = actionCreators[key];
	    if (typeof actionCreator === 'function') {
	      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
	    }
	  }
	  return boundActionCreators;
	}

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.__esModule = true;
	exports["default"] = applyMiddleware;

	var _compose = __webpack_require__(21);

	var _compose2 = _interopRequireDefault(_compose);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/**
	 * Creates a store enhancer that applies middleware to the dispatch method
	 * of the Redux store. This is handy for a variety of tasks, such as expressing
	 * asynchronous actions in a concise manner, or logging every action payload.
	 *
	 * See `redux-thunk` package as an example of the Redux middleware.
	 *
	 * Because middleware is potentially asynchronous, this should be the first
	 * store enhancer in the composition chain.
	 *
	 * Note that each middleware will be given the `dispatch` and `getState` functions
	 * as named arguments.
	 *
	 * @param {...Function} middlewares The middleware chain to be applied.
	 * @returns {Function} A store enhancer applying the middleware.
	 */
	function applyMiddleware() {
	  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
	    middlewares[_key] = arguments[_key];
	  }

	  return function (createStore) {
	    return function (reducer, initialState, enhancer) {
	      var store = createStore(reducer, initialState, enhancer);
	      var _dispatch = store.dispatch;
	      var chain = [];

	      var middlewareAPI = {
	        getState: store.getState,
	        dispatch: function dispatch(action) {
	          return _dispatch(action);
	        }
	      };
	      chain = middlewares.map(function (middleware) {
	        return middleware(middlewareAPI);
	      });
	      _dispatch = _compose2["default"].apply(undefined, chain)(store.dispatch);

	      return _extends({}, store, {
	        dispatch: _dispatch
	      });
	    };
	  };
	}

/***/ },
/* 21 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = compose;
	/**
	 * Composes single-argument functions from right to left.
	 *
	 * @param {...Function} funcs The functions to compose.
	 * @returns {Function} A function obtained by composing functions from right to
	 * left. For example, compose(f, g, h) is identical to arg => f(g(h(arg))).
	 */
	function compose() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }

	  return function () {
	    if (funcs.length === 0) {
	      return arguments.length <= 0 ? undefined : arguments[0];
	    }

	    var last = funcs[funcs.length - 1];
	    var rest = funcs.slice(0, -1);

	    return rest.reduceRight(function (composed, f) {
	      return f(composed);
	    }, last.apply(undefined, arguments));
	  };
	}

/***/ },
/* 22 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	'use strict';

	var REACT_STATICS = {
	    childContextTypes: true,
	    contextTypes: true,
	    defaultProps: true,
	    displayName: true,
	    getDefaultProps: true,
	    mixins: true,
	    propTypes: true,
	    type: true
	};

	var KNOWN_STATICS = {
	    name: true,
	    length: true,
	    prototype: true,
	    caller: true,
	    arguments: true,
	    arity: true
	};

	module.exports = function hoistNonReactStatics(targetComponent, sourceComponent) {
	    var keys = Object.getOwnPropertyNames(sourceComponent);
	    for (var i=0; i<keys.length; ++i) {
	        if (!REACT_STATICS[keys[i]] && !KNOWN_STATICS[keys[i]]) {
	            try {
	                targetComponent[keys[i]] = sourceComponent[keys[i]];
	            } catch (error) {

	            }
	        }
	    }

	    return targetComponent;
	};


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

	var _util = __webpack_require__(25);

	var _inject = __webpack_require__(26);

	var StyleSheet = {
	    create: function create(sheetDefinition) {
	        return (0, _util.mapObj)(sheetDefinition, function (_ref) {
	            var _ref2 = _slicedToArray(_ref, 2);

	            var key = _ref2[0];
	            var val = _ref2[1];

	            return [key, {
	                // TODO(emily): Make a 'production' mode which doesn't prepend
	                // the class name here, to make the generated CSS smaller.
	                _name: key + '_' + (0, _util.hashObject)(val),
	                _definition: val
	            }];
	        });
	    },

	    rehydrate: function rehydrate() {
	        var renderedClassNames = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

	        (0, _inject.addRenderedClassNames)(renderedClassNames);
	    }
	};

	var StyleSheetServer = {
	    renderStatic: function renderStatic(renderFunc) {
	        (0, _inject.reset)();
	        (0, _inject.startBuffering)();
	        var html = renderFunc();
	        var cssContent = (0, _inject.flushToString)();

	        return {
	            html: html,
	            css: {
	                content: cssContent,
	                renderedClassNames: (0, _inject.getRenderedClassNames)()
	            }
	        };
	    }
	};

	var css = function css() {
	    for (var _len = arguments.length, styleDefinitions = Array(_len), _key = 0; _key < _len; _key++) {
	        styleDefinitions[_key] = arguments[_key];
	    }

	    // Filter out falsy values from the input, to allow for
	    // `css(a, test && c)`
	    var validDefinitions = styleDefinitions.filter(function (def) {
	        return def;
	    });

	    // Break if there aren't any valid styles.
	    if (validDefinitions.length === 0) {
	        return "";
	    }

	    var className = validDefinitions.map(function (s) {
	        return s._name;
	    }).join("-o_O-");
	    (0, _inject.injectStyleOnce)(className, '.' + className, validDefinitions.map(function (d) {
	        return d._definition;
	    }));

	    return className;
	};

	exports['default'] = {
	    StyleSheet: StyleSheet,
	    StyleSheetServer: StyleSheetServer,
	    css: css
	};
	module.exports = exports['default'];

/***/ },
/* 25 */
/***/ function(module, exports) {

	// {K1: V1, K2: V2, ...} -> [[K1, V1], [K2, V2]]
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var objectToPairs = function objectToPairs(obj) {
	    return Object.keys(obj).map(function (key) {
	        return [key, obj[key]];
	    });
	};

	exports.objectToPairs = objectToPairs;
	// [[K1, V1], [K2, V2]] -> {K1: V1, K2: V2, ...}
	var pairsToObject = function pairsToObject(pairs) {
	    var result = {};
	    pairs.forEach(function (_ref) {
	        var _ref2 = _slicedToArray(_ref, 2);

	        var key = _ref2[0];
	        var val = _ref2[1];

	        result[key] = val;
	    });
	    return result;
	};

	var mapObj = function mapObj(obj, fn) {
	    return pairsToObject(objectToPairs(obj).map(fn));
	};

	exports.mapObj = mapObj;
	var UPPERCASE_RE = /([A-Z])/g;
	var MS_RE = /^ms-/;

	var kebabify = function kebabify(string) {
	    return string.replace(UPPERCASE_RE, '-$1').toLowerCase();
	};
	var kebabifyStyleName = function kebabifyStyleName(string) {
	    return kebabify(string).replace(MS_RE, '-ms-');
	};

	exports.kebabifyStyleName = kebabifyStyleName;
	var recursiveMerge = function recursiveMerge(a, b) {
	    // TODO(jlfwong): Handle malformed input where a and b are not the same
	    // type.

	    if (typeof a !== 'object') {
	        return b;
	    }

	    var ret = _extends({}, a);

	    Object.keys(b).forEach(function (key) {
	        if (ret.hasOwnProperty(key)) {
	            ret[key] = recursiveMerge(a[key], b[key]);
	        } else {
	            ret[key] = b[key];
	        }
	    });

	    return ret;
	};

	exports.recursiveMerge = recursiveMerge;
	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 * Taken from React's CSSProperty.js
	 */
	var isUnitlessNumber = {
	    animationIterationCount: true,
	    boxFlex: true,
	    boxFlexGroup: true,
	    boxOrdinalGroup: true,
	    columnCount: true,
	    flex: true,
	    flexGrow: true,
	    flexPositive: true,
	    flexShrink: true,
	    flexNegative: true,
	    flexOrder: true,
	    gridRow: true,
	    gridColumn: true,
	    fontWeight: true,
	    lineClamp: true,
	    lineHeight: true,
	    opacity: true,
	    order: true,
	    orphans: true,
	    tabSize: true,
	    widows: true,
	    zIndex: true,
	    zoom: true,

	    // SVG-related properties
	    fillOpacity: true,
	    stopOpacity: true,
	    strokeDashoffset: true,
	    strokeOpacity: true,
	    strokeWidth: true
	};

	/**
	 * Taken from React's CSSProperty.js
	 *
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	    return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 * Taken from React's CSSProperty.js
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	// Taken from React's CSSProperty.js
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	    prefixes.forEach(function (prefix) {
	        isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	    });
	});

	var stringifyValue = function stringifyValue(key, prop, stringHandlers) {
	    // If a handler exists for this particular key, let it interpret
	    // that value first before continuing
	    if (stringHandlers && stringHandlers.hasOwnProperty(key)) {
	        prop = stringHandlers[key](prop);
	    }

	    if (typeof prop === "number") {
	        if (isUnitlessNumber[key]) {
	            return "" + prop;
	        } else {
	            return prop + "px";
	        }
	    } else {
	        return prop;
	    }
	};

	exports.stringifyValue = stringifyValue;
	/**
	 * JS Implementation of MurmurHash2
	 *
	 * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
	 * @see http://github.com/garycourt/murmurhash-js
	 * @author <a href="mailto:aappleby@gmail.com">Austin Appleby</a>
	 * @see http://sites.google.com/site/murmurhash/
	 *
	 * @param {string} str ASCII only
	 * @return {string} Base 36 encoded hash result
	 */
	function murmurhash2_32_gc(str) {
	    var l = str.length;
	    var h = l;
	    var i = 0;
	    var k = undefined;

	    while (l >= 4) {
	        k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;

	        k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);
	        k ^= k >>> 24;
	        k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);

	        h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16) ^ k;

	        l -= 4;
	        ++i;
	    }

	    switch (l) {
	        case 3:
	            h ^= (str.charCodeAt(i + 2) & 0xff) << 16;
	        case 2:
	            h ^= (str.charCodeAt(i + 1) & 0xff) << 8;
	        case 1:
	            h ^= str.charCodeAt(i) & 0xff;
	            h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);
	    }

	    h ^= h >>> 13;
	    h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);
	    h ^= h >>> 15;

	    return (h >>> 0).toString(36);
	}

	// Hash a javascript object using JSON.stringify. This is very fast, about 3
	// microseconds on my computer for a sample object:
	// http://jsperf.com/test-hashfnv32a-hash/5
	//
	// Note that this uses JSON.stringify to stringify the objects so in order for
	// this to produce consistent hashes browsers need to have a consistent
	// ordering of objects. Ben Alpert says that Facebook depends on this, so we
	// can probably depend on this too.
	var hashObject = function hashObject(object) {
	    return murmurhash2_32_gc(JSON.stringify(object));
	};
	exports.hashObject = hashObject;

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _asap = __webpack_require__(27);

	var _asap2 = _interopRequireDefault(_asap);

	var _generate = __webpack_require__(29);

	// The current <style> tag we are inserting into, or null if we haven't
	// inserted anything yet. We could find this each time using
	// `document.querySelector("style[data-aphrodite"])`, but holding onto it is
	// faster.
	var styleTag = null;

	// Inject a string of styles into a <style> tag in the head of the document. This
	// will automatically create a style tag and then continue to use it for
	// multiple injections. It will also use a style tag with the `data-aphrodite`
	// tag on it if that exists in the DOM. This could be used for e.g. reusing the
	// same style tag that server-side rendering inserts.
	var injectStyleTag = function injectStyleTag(cssContents) {
	    if (styleTag == null) {
	        // Try to find a style tag with the `data-aphrodite` attribute first.
	        styleTag = document.querySelector("style[data-aphrodite]");

	        // If that doesn't work, generate a new style tag.
	        if (styleTag == null) {
	            // Taken from
	            // http://stackoverflow.com/questions/524696/how-to-create-a-style-tag-with-javascript
	            var head = document.head || document.getElementsByTagName('head')[0];
	            styleTag = document.createElement('style');

	            styleTag.type = 'text/css';
	            styleTag.setAttribute("data-aphrodite", "");
	            head.appendChild(styleTag);
	        }
	    }

	    if (styleTag.styleSheet) {
	        styleTag.styleSheet.cssText += cssContents;
	    } else {
	        styleTag.appendChild(document.createTextNode(cssContents));
	    }
	};

	// Custom handlers for stringifying CSS values that have side effects
	// (such as fontFamily, which can cause @font-face rules to be injected)
	var stringHandlers = {
	    // With fontFamily we look for objects that are passed in and interpret
	    // them as @font-face rules that we need to inject. The value of fontFamily
	    // can either be a string (as normal), an object (a single font face), or
	    // an array of objects and strings.
	    fontFamily: function fontFamily(val) {
	        if (Array.isArray(val)) {
	            return val.map(fontFamily).join(",");
	        } else if (typeof val === "object") {
	            injectStyleOnce(val.fontFamily, "@font-face", [val], false);
	            return '"' + val.fontFamily + '"';
	        } else {
	            return val;
	        }
	    }
	};

	// This is a map from Aphrodite's generated class names to `true` (acting as a
	// set of class names)
	var alreadyInjected = {};

	// This is the buffer of styles which have not yet been flushed.
	var injectionBuffer = "";

	// A flag to tell if we are already buffering styles. This could happen either
	// because we scheduled a flush call already, so newly added styles will
	// already be flushed, or because we are statically buffering on the server.
	var isBuffering = false;

	var injectStyleOnce = function injectStyleOnce(key, selector, definitions, useImportant) {
	    if (!alreadyInjected[key]) {
	        var generated = (0, _generate.generateCSS)(selector, definitions, stringHandlers, useImportant);

	        if (!isBuffering) {
	            // We should never be automatically buffering on the server (or any
	            // place without a document), so guard against that.
	            if (typeof document === "undefined") {
	                throw new Error("Cannot automatically buffer without a document");
	            }

	            // If we're not already buffering, schedule a call to flush the
	            // current styles.
	            isBuffering = true;
	            (0, _asap2['default'])(flushToStyleTag);
	        }

	        injectionBuffer += generated;
	        alreadyInjected[key] = true;
	    }
	};

	exports.injectStyleOnce = injectStyleOnce;
	var reset = function reset() {
	    injectionBuffer = "";
	    alreadyInjected = {};
	    isBuffering = false;
	    styleTag = null;
	};

	exports.reset = reset;
	var startBuffering = function startBuffering() {
	    if (isBuffering) {
	        throw new Error("Cannot buffer while already buffering");
	    }
	    isBuffering = true;
	};

	exports.startBuffering = startBuffering;
	var flushToString = function flushToString() {
	    isBuffering = false;
	    var ret = injectionBuffer;
	    injectionBuffer = "";
	    return ret;
	};

	exports.flushToString = flushToString;
	var flushToStyleTag = function flushToStyleTag() {
	    var cssContent = flushToString();
	    if (cssContent.length > 0) {
	        injectStyleTag(cssContent);
	    }
	};

	exports.flushToStyleTag = flushToStyleTag;
	var getRenderedClassNames = function getRenderedClassNames() {
	    return Object.keys(alreadyInjected);
	};

	exports.getRenderedClassNames = getRenderedClassNames;
	var addRenderedClassNames = function addRenderedClassNames(classNames) {
	    classNames.forEach(function (className) {
	        alreadyInjected[className] = true;
	    });
	};
	exports.addRenderedClassNames = addRenderedClassNames;

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	// rawAsap provides everything we need except exception management.
	var rawAsap = __webpack_require__(28);
	// RawTasks are recycled to reduce GC churn.
	var freeTasks = [];
	// We queue errors to ensure they are thrown in right order (FIFO).
	// Array-as-queue is good enough here, since we are just dealing with exceptions.
	var pendingErrors = [];
	var requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);

	function throwFirstError() {
	    if (pendingErrors.length) {
	        throw pendingErrors.shift();
	    }
	}

	/**
	 * Calls a task as soon as possible after returning, in its own event, with priority
	 * over other events like animation, reflow, and repaint. An error thrown from an
	 * event will not interrupt, nor even substantially slow down the processing of
	 * other events, but will be rather postponed to a lower priority event.
	 * @param {{call}} task A callable object, typically a function that takes no
	 * arguments.
	 */
	module.exports = asap;
	function asap(task) {
	    var rawTask;
	    if (freeTasks.length) {
	        rawTask = freeTasks.pop();
	    } else {
	        rawTask = new RawTask();
	    }
	    rawTask.task = task;
	    rawAsap(rawTask);
	}

	// We wrap tasks with recyclable task objects.  A task object implements
	// `call`, just like a function.
	function RawTask() {
	    this.task = null;
	}

	// The sole purpose of wrapping the task is to catch the exception and recycle
	// the task object after its single use.
	RawTask.prototype.call = function () {
	    try {
	        this.task.call();
	    } catch (error) {
	        if (asap.onerror) {
	            // This hook exists purely for testing purposes.
	            // Its name will be periodically randomized to break any code that
	            // depends on its existence.
	            asap.onerror(error);
	        } else {
	            // In a web browser, exceptions are not fatal. However, to avoid
	            // slowing down the queue of pending tasks, we rethrow the error in a
	            // lower priority turn.
	            pendingErrors.push(error);
	            requestErrorThrow();
	        }
	    } finally {
	        this.task = null;
	        freeTasks[freeTasks.length] = this;
	    }
	};


/***/ },
/* 28 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";

	// Use the fastest means possible to execute a task in its own turn, with
	// priority over other events including IO, animation, reflow, and redraw
	// events in browsers.
	//
	// An exception thrown by a task will permanently interrupt the processing of
	// subsequent tasks. The higher level `asap` function ensures that if an
	// exception is thrown by a task, that the task queue will continue flushing as
	// soon as possible, but if you use `rawAsap` directly, you are responsible to
	// either ensure that no exceptions are thrown from your task, or to manually
	// call `rawAsap.requestFlush` if an exception is thrown.
	module.exports = rawAsap;
	function rawAsap(task) {
	    if (!queue.length) {
	        requestFlush();
	        flushing = true;
	    }
	    // Equivalent to push, but avoids a function call.
	    queue[queue.length] = task;
	}

	var queue = [];
	// Once a flush has been requested, no further calls to `requestFlush` are
	// necessary until the next `flush` completes.
	var flushing = false;
	// `requestFlush` is an implementation-specific method that attempts to kick
	// off a `flush` event as quickly as possible. `flush` will attempt to exhaust
	// the event queue before yielding to the browser's own event loop.
	var requestFlush;
	// The position of the next task to execute in the task queue. This is
	// preserved between calls to `flush` so that it can be resumed if
	// a task throws an exception.
	var index = 0;
	// If a task schedules additional tasks recursively, the task queue can grow
	// unbounded. To prevent memory exhaustion, the task queue will periodically
	// truncate already-completed tasks.
	var capacity = 1024;

	// The flush function processes all tasks that have been scheduled with
	// `rawAsap` unless and until one of those tasks throws an exception.
	// If a task throws an exception, `flush` ensures that its state will remain
	// consistent and will resume where it left off when called again.
	// However, `flush` does not make any arrangements to be called again if an
	// exception is thrown.
	function flush() {
	    while (index < queue.length) {
	        var currentIndex = index;
	        // Advance the index before calling the task. This ensures that we will
	        // begin flushing on the next task the task throws an error.
	        index = index + 1;
	        queue[currentIndex].call();
	        // Prevent leaking memory for long chains of recursive calls to `asap`.
	        // If we call `asap` within tasks scheduled by `asap`, the queue will
	        // grow, but to avoid an O(n) walk for every task we execute, we don't
	        // shift tasks off the queue after they have been executed.
	        // Instead, we periodically shift 1024 tasks off the queue.
	        if (index > capacity) {
	            // Manually shift all values starting at the index back to the
	            // beginning of the queue.
	            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
	                queue[scan] = queue[scan + index];
	            }
	            queue.length -= index;
	            index = 0;
	        }
	    }
	    queue.length = 0;
	    index = 0;
	    flushing = false;
	}

	// `requestFlush` is implemented using a strategy based on data collected from
	// every available SauceLabs Selenium web driver worker at time of writing.
	// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593

	// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that
	// have WebKitMutationObserver but not un-prefixed MutationObserver.
	// Must use `global` instead of `window` to work in both frames and web
	// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.
	var BrowserMutationObserver = global.MutationObserver || global.WebKitMutationObserver;

	// MutationObservers are desirable because they have high priority and work
	// reliably everywhere they are implemented.
	// They are implemented in all modern browsers.
	//
	// - Android 4-4.3
	// - Chrome 26-34
	// - Firefox 14-29
	// - Internet Explorer 11
	// - iPad Safari 6-7.1
	// - iPhone Safari 7-7.1
	// - Safari 6-7
	if (typeof BrowserMutationObserver === "function") {
	    requestFlush = makeRequestCallFromMutationObserver(flush);

	// MessageChannels are desirable because they give direct access to the HTML
	// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera
	// 11-12, and in web workers in many engines.
	// Although message channels yield to any queued rendering and IO tasks, they
	// would be better than imposing the 4ms delay of timers.
	// However, they do not work reliably in Internet Explorer or Safari.

	// Internet Explorer 10 is the only browser that has setImmediate but does
	// not have MutationObservers.
	// Although setImmediate yields to the browser's renderer, it would be
	// preferrable to falling back to setTimeout since it does not have
	// the minimum 4ms penalty.
	// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and
	// Desktop to a lesser extent) that renders both setImmediate and
	// MessageChannel useless for the purposes of ASAP.
	// https://github.com/kriskowal/q/issues/396

	// Timers are implemented universally.
	// We fall back to timers in workers in most engines, and in foreground
	// contexts in the following browsers.
	// However, note that even this simple case requires nuances to operate in a
	// broad spectrum of browsers.
	//
	// - Firefox 3-13
	// - Internet Explorer 6-9
	// - iPad Safari 4.3
	// - Lynx 2.8.7
	} else {
	    requestFlush = makeRequestCallFromTimer(flush);
	}

	// `requestFlush` requests that the high priority event queue be flushed as
	// soon as possible.
	// This is useful to prevent an error thrown in a task from stalling the event
	// queue if the exception handled by Node.js’s
	// `process.on("uncaughtException")` or by a domain.
	rawAsap.requestFlush = requestFlush;

	// To request a high priority event, we induce a mutation observer by toggling
	// the text of a text node between "1" and "-1".
	function makeRequestCallFromMutationObserver(callback) {
	    var toggle = 1;
	    var observer = new BrowserMutationObserver(callback);
	    var node = document.createTextNode("");
	    observer.observe(node, {characterData: true});
	    return function requestCall() {
	        toggle = -toggle;
	        node.data = toggle;
	    };
	}

	// The message channel technique was discovered by Malte Ubl and was the
	// original foundation for this library.
	// http://www.nonblocking.io/2011/06/windownexttick.html

	// Safari 6.0.5 (at least) intermittently fails to create message ports on a
	// page's first load. Thankfully, this version of Safari supports
	// MutationObservers, so we don't need to fall back in that case.

	// function makeRequestCallFromMessageChannel(callback) {
	//     var channel = new MessageChannel();
	//     channel.port1.onmessage = callback;
	//     return function requestCall() {
	//         channel.port2.postMessage(0);
	//     };
	// }

	// For reasons explained above, we are also unable to use `setImmediate`
	// under any circumstances.
	// Even if we were, there is another bug in Internet Explorer 10.
	// It is not sufficient to assign `setImmediate` to `requestFlush` because
	// `setImmediate` must be called *by name* and therefore must be wrapped in a
	// closure.
	// Never forget.

	// function makeRequestCallFromSetImmediate(callback) {
	//     return function requestCall() {
	//         setImmediate(callback);
	//     };
	// }

	// Safari 6.0 has a problem where timers will get lost while the user is
	// scrolling. This problem does not impact ASAP because Safari 6.0 supports
	// mutation observers, so that implementation is used instead.
	// However, if we ever elect to use timers in Safari, the prevalent work-around
	// is to add a scroll event listener that calls for a flush.

	// `setTimeout` does not call the passed callback if the delay is less than
	// approximately 7 in web workers in Firefox 8 through 18, and sometimes not
	// even then.

	function makeRequestCallFromTimer(callback) {
	    return function requestCall() {
	        // We dispatch a timeout with a specified delay of 0 for engines that
	        // can reliably accommodate that request. This will usually be snapped
	        // to a 4 milisecond delay, but once we're flushing, there's no delay
	        // between events.
	        var timeoutHandle = setTimeout(handleTimer, 0);
	        // However, since this timer gets frequently dropped in Firefox
	        // workers, we enlist an interval handle that will try to fire
	        // an event 20 times per second until it succeeds.
	        var intervalHandle = setInterval(handleTimer, 50);

	        function handleTimer() {
	            // Whichever timer succeeds will cancel both timers and
	            // execute the callback.
	            clearTimeout(timeoutHandle);
	            clearInterval(intervalHandle);
	            callback();
	        }
	    };
	}

	// This is for `asap.js` only.
	// Its name will be periodically randomized to break any code that depends on
	// its existence.
	rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;

	// ASAP was originally a nextTick shim included in Q. This was factored out
	// into this ASAP package. It was later adapted to RSVP which made further
	// amendments. These decisions, particularly to marginalize MessageChannel and
	// to capture the MutationObserver implementation in a closure, were integrated
	// back into ASAP proper.
	// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

	var _util = __webpack_require__(25);

	var generateCSS = function generateCSS(selector, styleTypes, stringHandlers, useImportant) {
	    var merged = styleTypes.reduce(_util.recursiveMerge);

	    var declarations = {};
	    var mediaQueries = {};
	    var pseudoStyles = {};

	    Object.keys(merged).forEach(function (key) {
	        if (key[0] === ':') {
	            pseudoStyles[key] = merged[key];
	        } else if (key[0] === '@') {
	            mediaQueries[key] = merged[key];
	        } else {
	            declarations[key] = merged[key];
	        }
	    });

	    return generateCSSRuleset(selector, declarations, stringHandlers, useImportant) + Object.keys(pseudoStyles).map(function (pseudoSelector) {
	        return generateCSSRuleset(selector + pseudoSelector, pseudoStyles[pseudoSelector], stringHandlers, useImportant);
	    }).join("") + Object.keys(mediaQueries).map(function (mediaQuery) {
	        var ruleset = generateCSS(selector, [mediaQueries[mediaQuery]], stringHandlers, useImportant);
	        return mediaQuery + '{' + ruleset + '}';
	    }).join("");
	};

	exports.generateCSS = generateCSS;
	var generateCSSRuleset = function generateCSSRuleset(selector, declarations, stringHandlers, useImportant) {
	    var rules = (0, _util.objectToPairs)(declarations).map(function (_ref) {
	        var _ref2 = _slicedToArray(_ref, 2);

	        var key = _ref2[0];
	        var value = _ref2[1];

	        var stringValue = (0, _util.stringifyValue)(key, value, stringHandlers);
	        var important = useImportant === false ? "" : " !important";
	        return (0, _util.kebabifyStyleName)(key) + ':' + stringValue + important + ';';
	    }).join("");

	    if (rules) {
	        return selector + '{' + rules + '}';
	    } else {
	        return "";
	    }
	};
	exports.generateCSSRuleset = generateCSSRuleset;

/***/ },
/* 30 */
/***/ function(module, exports) {

	/**
	 * In order to reflect upon a components prop types, we need to patch them.
	 *
	 * This is necessary because, while React.PropTypes does validation, it does so
	 * only as a function from input to a boolean. Trying to figure out from the
	 * PropTypes what the full range of valid values is is much harder! So we
	 * monkey patch it to retain information about the types.
	 */

	'use strict';

	var patch = function patch(PropTypes) {
	    if (PropTypes.__isPatchedBySandbox) {
	        return;
	    }

	    Object.keys(PropTypes).forEach(function (key) {
	        var orig = PropTypes[key];

	        // If the PropType has a .isRequired property it means that this prop
	        // type is a validator function itself, like PropTypes.string. If not,
	        // it means it's a validator function constructor, like PropTypes.shape
	        // (PropTypes.shape({...}) becomes the validator function).
	        if (orig.isRequired != null) {
	            orig.__sandbox_meta = {
	                type: key,
	                required: false
	            };
	            orig.isRequired.__sandbox_meta = {
	                type: key,
	                required: true
	            };
	        } else {
	            PropTypes[key] = function () {
	                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	                    args[_key] = arguments[_key];
	                }

	                var ret = orig.apply(undefined, args);
	                ret.__sandbox_meta = {
	                    type: key,
	                    required: false,
	                    args: args
	                };
	                ret.isRequired.__sandbox_meta = {
	                    type: key,
	                    required: true,
	                    args: args
	                };
	                return ret;
	            };
	        }
	    });

	    PropTypes.__isPatchedBySandbox = true;
	};

	var inferType = function inferType(propType) {
	    if (propType.__sandbox_meta != null) {
	        var _propType$__sandbox_meta = propType.__sandbox_meta;
	        var type = _propType$__sandbox_meta.type;
	        var required = _propType$__sandbox_meta.required;
	        var args = _propType$__sandbox_meta.args;

	        if (args != null) {
	            return {
	                type: type,
	                required: required,
	                args: args.map(inferType),
	                __propType: propType
	            };
	        } else {
	            return {
	                type: type,
	                required: required,
	                __propType: propType
	            };
	        }
	    } else if (Array.isArray(propType)) {
	        return propType.map(inferType);
	    } else if (typeof propType === 'object') {
	        var _ret = (function () {
	            var ret = {};
	            Object.keys(propType).forEach(function (key) {
	                ret[key] = inferType(propType[key]);
	            });
	            return {
	                v: ret
	            };
	        })();

	        if (typeof _ret === 'object') return _ret.v;
	    } else {
	        return propType;
	    }
	};

	/**
	 * Given a refernece to a component, return a description of the proptypes it
	 * expects.
	 */
	var inferTypesForComponent = function inferTypesForComponent(Component) {
	    var ret = {};

	    var propTypes = Component.propTypes || {};

	    Object.keys(propTypes).forEach(function (propName) {
	        ret[propName] = inferType(propTypes[propName]);
	    });

	    return ret;
	};

	/**
	 * Given a value and a type as returned by inferType, return true if the value
	 * satisfies the type.
	 */
	var valueSatisfiesType = function valueSatisfiesType(value, inferredType) {
	    var propType = typeof inferredType === 'function' ? inferredType : inferredType.__propType;

	    var maybeError = propType({ __ignored__: value }, '__ignored__', '__ignore__', 'prop');

	    return !(maybeError instanceof Error);
	};

	var _generateValue = function _generateValue(inferredType, path, config) {
	    var generatorType = 'string';
	    var required = true;

	    if (inferredType && inferredType.type) {
	        required = !!inferredType.required;

	        if (config.hasOwnProperty(inferredType.type)) {
	            generatorType = inferredType.type;
	        }
	    }

	    return config[generatorType](path, required, function (t, path) {
	        return _generateValue(t, path, config);
	    }, inferredType);
	};

	/**
	 * Given an inferred type and an optional configuration object, return a value
	 * satisfying that type.
	 */
	var generateValueForType = function generateValueForType(inferredType) {
	    var path = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
	    var config = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	    var fullConfig = {};
	    Object.assign(fullConfig, generateValueForType.staticDefaults, config);
	    return _generateValue(inferredType, path, fullConfig);
	};

	// Generators all have the signature
	//
	//      (path, isRequired, generator, inferredType) => value
	//
	// Additional arguments are used in some to allow re-use by other generators.
	generateValueForType.staticDefaults = {
	    string: function string(path, isRequired) {
	        return isRequired ? '' : null;
	    },
	    number: function number(path, isRequired) {
	        return isRequired ? 0 : null;
	    },
	    bool: function bool(path, isRequired) {
	        return isRequired ? false : null;
	    },
	    array: function array(path, isRequired, generator, inferredType) {
	        var length = arguments.length <= 4 || arguments[4] === undefined ? 1 : arguments[4];
	        var childType = arguments.length <= 5 || arguments[5] === undefined ? null : arguments[5];

	        if (!isRequired) {
	            return null;
	        }
	        var ret = [];
	        for (var i = 0; i < length; i++) {
	            ret.push(generator(childType, path.concat([i])));
	        }
	        return ret;
	    },
	    object: function object(path, isRequired, generator, inferredType) {
	        var length = arguments.length <= 4 || arguments[4] === undefined ? 1 : arguments[4];
	        var childType = arguments.length <= 5 || arguments[5] === undefined ? null : arguments[5];
	        var keyGenerator = arguments.length <= 6 || arguments[6] === undefined ? function () {
	            return 'key';
	        } : arguments[6];

	        if (!isRequired) {
	            return null;
	        }
	        var ret = {};
	        for (var i = 0; i < length; i++) {
	            var keyPrefix = keyGenerator();
	            var key = keyPrefix;
	            for (var j = 2; ret.hasOwnProperty(key); j++) {
	                key = keyPrefix + '_' + j;
	            }
	            ret[keyGenerator(path)] = generator(childType, path.concat([key]));
	        }
	        return ret;
	    },
	    arrayOf: function arrayOf(path, isRequired, generator, inferredType, length) {
	        return generateValueForType.staticDefaults.array(path, isRequired, generator, inferredType, length, inferredType.args[0]);
	    },
	    objectOf: function objectOf(path, isRequired, generator, inferredType, length, keyGenerator) {
	        return generateValueForType.staticDefaults.object(path, isRequired, generator, inferredType, length, inferredType.args[0], keyGenerator);
	    },
	    shape: function shape(path, isRequired, generator, inferredType) {
	        if (!isRequired) {
	            return null;
	        }
	        var ret = {};
	        var shapeTypes = inferredType.args[0];
	        for (var key in shapeTypes) {
	            if (!shapeTypes.hasOwnProperty(key)) {
	                continue;
	            }
	            ret[key] = generator(shapeTypes[key], path.concat([key]));
	        }
	        return ret;
	    }
	};

	var randomMaybe = function randomMaybe(isRequired, value) {
	    // If the prop is not required, return null 1/5 of the time.
	    if (!isRequired && Math.random() < 0.2) {
	        return null;
	    }
	    return value;
	};

	var randomChoice = function randomChoice(list) {
	    return list[Math.floor(Math.random() * list.length)];
	};

	// TODO(jlfwong): This is a little crazy -- it might be better to only allow
	// overriding of null probability, strings, numbers, booleans, and lengths of
	// things.
	//
	// This also might be less crazy if I switch to object args instead of
	// positional.
	generateValueForType.randomDefaults = {
	    string: function string(path, isRequired) {
	        return randomMaybe(isRequired, [randomChoice(ADJECTIVES_1), randomChoice(ADJECTIVES_2), randomChoice(ANIMALS)].join(' '));
	    },
	    number: function number(path, isRequired) {
	        return randomMaybe(isRequired, Math.floor(Math.random() * 9));
	    },
	    bool: function bool(path, isRequired) {
	        return randomMaybe(isRequired, Math.random() > 0.5);
	    },
	    array: function array(path, isRequired, generator, inferredType) {
	        var length = arguments.length <= 4 || arguments[4] === undefined ? 1 : arguments[4];
	        var childType = arguments.length <= 5 || arguments[5] === undefined ? null : arguments[5];

	        return randomMaybe(isRequired, generateValueForType.staticDefaults.array(path, true, generator, inferredType, Math.floor(Math.random() * 9), childType));
	    },
	    object: function object(path, isRequired, generator, inferredType) {
	        var length = arguments.length <= 4 || arguments[4] === undefined ? 1 : arguments[4];
	        var childType = arguments.length <= 5 || arguments[5] === undefined ? null : arguments[5];
	        var keyGenerator = arguments.length <= 6 || arguments[6] === undefined ? function () {
	            return 'key';
	        } : arguments[6];

	        return randomMaybe(isRequired, generateValueForType.staticDefaults.object(path, true, generator, inferredType, Math.floor(Math.random() * 9), childType, keyGenerator));
	    },
	    arrayOf: function arrayOf(path, isRequired, generator, inferredType, length) {
	        return generateValueForType.randomDefaults.array(path, isRequired, generator, inferredType, length, inferredType.args[0]);
	    },
	    objectOf: function objectOf(path, isRequired, generator, inferredType, length, keyGenerator) {
	        return generateValueForType.randomDefaults.object(path, isRequired, generator, inferredType, length, inferredType.args[0], keyGenerator);
	    },
	    shape: function shape(path, isRequired) {
	        var _generateValueForType$staticDefaults;

	        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	            args[_key2 - 2] = arguments[_key2];
	        }

	        return randomMaybe(isRequired, (_generateValueForType$staticDefaults = generateValueForType.staticDefaults).shape.apply(_generateValueForType$staticDefaults, [path, true].concat(args)));
	    },
	    oneOf: function oneOf(path, isRequired, generator, inferredType) {
	        return randomMaybe(isRequired, randomChoice(inferredType.args[0]));
	    },
	    func: function func(path, isRequired, generator, inferredType) {
	        return randomMaybe(isRequired, function () {});
	    }
	};

	// TODO(jlfwong): Reorganize this to avoid the Object.assign
	// call on every value generation.
	var generateRandomValueForType = function generateRandomValueForType(inferredType) {
	    var path = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
	    var config = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	    var fullConfig = {};
	    Object.assign(fullConfig, generateValueForType.staticDefaults, generateValueForType.randomDefaults, config);
	    return _generateValue(inferredType, path, fullConfig);
	};

	var ADJECTIVES_1 = ['Agreeable', 'Brave', 'Calm', 'Delightful', 'Eager', 'Faithful', 'Gentle', 'Happy', 'Jolly', 'Kind', 'Lively', 'Nice', 'Obedient', 'Proud', 'Relieved', 'Silly', 'Thankful', 'Victorious', 'Witty', 'Zealous'];

	var ADJECTIVES_2 = ['Cooing', 'Deafening', 'Faint', 'Hissing', 'Loud', 'Melodic', 'Noisy', 'Purring', 'Quiet', 'Raspy', 'Screeching', 'Thundering', 'Voiceless', 'Whispering'];

	var ANIMALS = ["Leafy seadragon", "Sun Bear", "Komondor Dog", "Angora Rabbit", "Red Panda", "Sloth", "Emperor Tamarin", "White-faced Saki Monkey", "Tapir", "Hagfish", "Star-nosed Mole", "Proboscis Monkey", "Pink Fairy Armadillo", "Axolotl", "Aye-aye", "Alpaca", "Tarsier", "Dumbo Octopus", "Frill-necked Lizard", "Narwhal", "Sucker-footed Bat", "Pygmy Marmoset", "Blobfish", "Platypus", "Shoebill", "Yeti Crab"];

	module.exports = {
	    patch: patch,
	    inferType: inferType,
	    inferTypesForComponent: inferTypesForComponent,
	    valueSatisfiesType: valueSatisfiesType,
	    generateValueForType: generateValueForType,
	    generateRandomValueForType: generateRandomValueForType
	};

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Stateless component for displaying things in the react sandbox.
	 */

	"use strict";

	var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

	var React = __webpack_require__(2);

	var _require = __webpack_require__(24);

	var StyleSheet = _require.StyleSheet;
	var css = _require.css;

	var SandboxInstance = __webpack_require__(32);

	var RP = React.PropTypes;

	var emptyList = Object.freeze([]);

	var generateProps = function generateProps(types, valueGenerator) {
	    var ret = {};
	    for (var key in types) {
	        if (!types.hasOwnProperty(key)) {
	            continue;
	        }

	        ret[key] = valueGenerator(types[key], [key]);
	    }
	    return ret;
	};

	var SandboxDisplay = React.createClass({
	    displayName: "SandboxDisplay",

	    propTypes: {
	        // A list of [label, key] pairs, one per component loadable in the
	        // sandbox.
	        componentList: RP.arrayOf(RP.arrayOf(RP.string.isRequired).isRequired),

	        // Generator function returning a value given a type and name of the
	        // prop.
	        generator: RP.func.isRequired,

	        // Called with the key of the component to select
	        onComponentSelect: RP.func.isRequired,

	        // Called with the new prop values to create a fixture with.
	        onFixtureAdd: RP.func.isRequired,

	        // Called with the path and prop values of the fixture to update.
	        onFixtureUpdate: RP.func.isRequired,

	        selectedComponent: RP.shape({
	            // A key identifying the currently selected component
	            key: RP.string.isRequired,

	            // A reference to the currently selected component
	            reference: RP.func,

	            // The inferred types of the props of the selected component
	            types: RP.object,

	            // A list of instances of props to pass to the component
	            fixtures: RP.shape({
	                instances: RP.arrayOf(RP.object.isRequired).isRequired,
	                log: RP.arrayOf(RP.string.isRequired)
	            })
	        })

	    },

	    handleFixtureAdd: function handleFixtureAdd() {
	        var _props = this.props;
	        var selectedComponent = _props.selectedComponent;
	        var generator = _props.generator;
	        var onFixtureAdd = _props.onFixtureAdd;

	        onFixtureAdd(generateProps(selectedComponent.types, generator));
	    },

	    render: function render() {
	        var _this = this;

	        // TODO(jlfwong): Adding entire new fixtures

	        var _props2 = this.props;
	        var componentList = _props2.componentList;
	        var selectedComponent = _props2.selectedComponent;
	        var onComponentSelect = _props2.onComponentSelect;
	        var onFixtureUpdate = _props2.onFixtureUpdate;

	        if (!componentList) {
	            // TODO(jlfwong): Nicer loading indicator
	            return React.createElement(
	                "div",
	                null,
	                "Loading..."
	            );
	        }

	        // TODO(jlfwong): Refactor this into a getContent() method to leverage
	        // early-returns
	        var content = "";

	        if (selectedComponent) {
	            if (!selectedComponent.reference) {
	                content = "Loading " + selectedComponent.key + "...";
	            } else {
	                (function () {
	                    var name = selectedComponent.reference.displayName;
	                    var fixtures = selectedComponent.fixtures;

	                    if (fixtures == null) {
	                        content = "Loading fixtures for " + name + "...";
	                    } else {
	                        content = React.createElement(
	                            "div",
	                            null,
	                            React.createElement(
	                                "h1",
	                                null,
	                                name
	                            ),
	                            fixtures.instances.length > 0 ? fixtures.instances.map(function (props, i) {
	                                return React.createElement(SandboxInstance, {
	                                    key: i,
	                                    cursor: [i],
	                                    component: selectedComponent.reference,
	                                    props: props,
	                                    types: selectedComponent.types,
	                                    callbacksToLog: fixtures.log || emptyList,
	                                    onFixtureUpdate: onFixtureUpdate
	                                });
	                            }) : "No fixtures for this component yet. Add some!",
	                            React.createElement(
	                                "div",
	                                { className: css(styles.addButtonContainer) },
	                                React.createElement(
	                                    "button",
	                                    { onClick: _this.handleFixtureAdd },
	                                    "Add new fixture"
	                                )
	                            )
	                        );
	                    }
	                })();
	            }
	        }

	        return React.createElement(
	            "div",
	            { className: css(styles.root) },
	            React.createElement(
	                "select",
	                {
	                    value: selectedComponent && selectedComponent.key,
	                    onChange: function (ev) {
	                        return onComponentSelect(ev.target.value);
	                    }
	                },
	                componentList.map(function (_ref) {
	                    var _ref2 = _slicedToArray(_ref, 2);

	                    var label = _ref2[0];
	                    var key = _ref2[1];

	                    return React.createElement(
	                        "option",
	                        { value: key, key: key },
	                        label
	                    );
	                })
	            ),
	            React.createElement(
	                "div",
	                null,
	                content
	            )
	        );
	    }
	});

	var styles = StyleSheet.create({
	    root: {
	        textAlign: 'center',
	        padding: 20
	    },
	    addButtonContainer: {
	        borderTop: '1px dotted black'
	    }
	});

	module.exports = SandboxDisplay;
	/* TODO(jlfwong): Switch this to autocomplete */

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/*eslint-disable react/forbid-prop-types, no-console*/

	/**
	 * Component to render a single instance of a component using fixture data.
	 */

	"use strict";

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(2);

	var _require = __webpack_require__(24);

	var StyleSheet = _require.StyleSheet;
	var css = _require.css;

	var PropEditor = __webpack_require__(33);
	var PureRenderMixinWithCursor = __webpack_require__(36);

	var RP = React.PropTypes;

	var getInvalidProps = function getInvalidProps(component, props) {
	    var propTypes = component.propTypes;
	    var componentName = component.displayName;

	    var errors = [];

	    for (var propName in propTypes) {
	        if (!propTypes.hasOwnProperty(propName)) {
	            continue;
	        }
	        var error = propTypes[propName](props, propName, componentName, 'prop');
	        if (error instanceof Error) {
	            errors.push(error);
	        }
	    }
	    return errors;
	};

	var SandboxInstance = React.createClass({
	    displayName: "SandboxInstance",

	    propTypes: {
	        // The props taking function values to respond to by logging to the
	        // console.
	        callbacksToLog: RP.arrayOf(RP.string.isRequired).isRequired,

	        // The Component class to render
	        component: RP.func.isRequired,

	        // Cursor to the data this binds to in the fixtures. To be treated as
	        // opaque.
	        cursor: RP.arrayOf(RP.oneOfType([RP.string.isRequired, RP.number.isRequired]).isRequired).isRequired,

	        // Called with the new prop values on update
	        onFixtureUpdate: RP.func.isRequired,

	        // The props for the component
	        props: RP.object.isRequired,

	        types: PropEditor.propTypes.types
	    },

	    mixins: [PureRenderMixinWithCursor],

	    render: function render() {
	        var _props = this.props;
	        var component = _props.component;
	        var props = _props.props;
	        var callbacksToLog = _props.callbacksToLog;
	        var onFixtureUpdate = _props.onFixtureUpdate;
	        var cursor = _props.cursor;
	        var types = _props.types;

	        var propsToPass = _extends({}, props);

	        callbacksToLog.forEach(function (propToLog) {
	            propsToPass[propToLog] = function () {
	                console.log(propToLog, arguments);
	            };
	        });

	        var propErrors = getInvalidProps(component, propsToPass);

	        var Component = component;

	        return React.createElement(
	            "div",
	            { className: css(styles.container) },
	            React.createElement(
	                "div",
	                { className: css(styles.propEditorWrapper) },
	                React.createElement(PropEditor, {
	                    component: component,
	                    componentProps: propsToPass,
	                    onChange: onFixtureUpdate,
	                    cursor: cursor,
	                    types: types
	                })
	            ),
	            React.createElement(
	                "div",
	                { className: css(styles.componentTableWrapper) },
	                propErrors.length > 0 ? React.createElement(
	                    "pre",
	                    { className: css(styles.errorBox) },
	                    propErrors.map(function (er) {
	                        return er.toString();
	                    }).join('\n')
	                ) : React.createElement(Component, propsToPass)
	            )
	        );
	    }
	});

	var styles = StyleSheet.create({
	    container: {
	        display: 'flex',
	        borderTop: '1px dotted black'
	    },
	    propEditorWrapper: {
	        padding: '10px 10px 10px 0',
	        width: 400,
	        overflow: 'scroll',
	        maxHeight: 800,
	        borderRight: '1px dotted black'
	    },
	    componentTableWrapper: {
	        padding: '10px 0',
	        flexGrow: 1,
	        overflow: 'auto',
	        maxHeight: 800
	    },
	    errorBox: {
	        background: 'red',
	        color: 'black',
	        whiteSpace: 'pre',
	        textAlign: 'left'
	    }
	});

	module.exports = SandboxInstance;

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/*eslint-disable react/forbid-prop-types*/

	/**
	 * Component for editing the props of a specific component instance.
	 */

	"use strict";

	var React = __webpack_require__(2);

	var SinglePropEditor = __webpack_require__(34);

	var RP = React.PropTypes;

	var PropEditor = React.createClass({
	    displayName: "PropEditor",

	    propTypes: {
	        // The component class whose props are being edited
	        component: RP.func.isRequired,

	        // The current set of props to display for this fixture
	        componentProps: RP.object.isRequired,

	        // Cursor to the data this binds to in the fixtures.
	        cursor: RP.arrayOf(RP.oneOfType([RP.string.isRequired, RP.number.isRequired]).isRequired).isRequired,

	        // Invoked with new values of props as they change
	        onChange: RP.func.isRequired,

	        // The type of the prop to edit. This will match the return
	        // type of inferTypesForComponent.
	        types: RP.objectOf(SinglePropEditor.propTypes.type).isRequired
	    },

	    render: function render() {
	        var _props = this.props;
	        var componentProps = _props.componentProps;
	        var onChange = _props.onChange;
	        var cursor = _props.cursor;
	        var types = _props.types;

	        return React.createElement(
	            "div",
	            null,
	            Object.keys(types).map(function (key) {
	                return React.createElement(SinglePropEditor, {
	                    key: key,
	                    name: key,
	                    type: types[key],
	                    value: componentProps[key],
	                    onChange: onChange,
	                    cursor: cursor.concat([key])
	                });
	            })
	        );
	    }
	});

	module.exports = PropEditor;

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * A component for editing the value of a single (possibly complex) prop of
	 * a component.
	 */

	"use strict";

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(2);
	var ReactDOM = __webpack_require__(35);

	var _require = __webpack_require__(24);

	var StyleSheet = _require.StyleSheet;
	var css = _require.css;

	var PureRenderMixinWithCursor = __webpack_require__(36);

	var _require2 = __webpack_require__(30);

	var valueSatisfiesType = _require2.valueSatisfiesType;
	var generateRandomValueForType = _require2.generateRandomValueForType;

	var RP = React.PropTypes;

	var debounce = function debounce(fn, wait) {
	    var timeout = undefined;
	    return function () {
	        var _this = this;

	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }

	        var later = function later() {
	            fn.apply(_this, args);
	        };
	        clearTimeout(timeout);
	        timeout = setTimeout(later, wait);
	    };
	};

	var DebouncedInput = React.createClass({
	    displayName: "DebouncedInput",

	    propTypes: {
	        onChange: RP.func.isRequired,
	        value: RP.string
	    },

	    getInitialState: function getInitialState() {
	        return {
	            internalValue: this.props.value
	        };
	    },

	    componentWillMount: function componentWillMount() {
	        this.debouncedOnChange = debounce(this.props.onChange, 100);
	    },

	    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	        // Only over-ride the internal value if the element is not focused.
	        if (ReactDOM.findDOMNode(this) !== document.activeElement) {
	            this.setState({
	                internalValue: nextProps.value
	            });
	        }
	    },

	    handleChange: function handleChange(ev) {
	        var value = ev.target.value;
	        this.setState({ internalValue: value });
	        this.debouncedOnChange(value);
	    },

	    render: function render() {
	        return React.createElement("input", _extends({}, this.props, {
	            onChange: this.handleChange,
	            value: this.state.internalValue
	        }));
	    }
	});

	var FIELD_RENDERERS = (function () {
	    var string = function string(_ref) {
	        var value = _ref.value;
	        var cursor = _ref.cursor;
	        var onChange = _ref.onChange;

	        return React.createElement(DebouncedInput, {
	            className: css(styles.stringInput),
	            type: "text",
	            value: value,
	            placeholder: value == null ? '(null)' : '',
	            onChange: function (value) {
	                return onChange(cursor, value);
	            }
	        });
	    };

	    var bool = function bool(_ref2) {
	        var value = _ref2.value;
	        var cursor = _ref2.cursor;
	        var onChange = _ref2.onChange;

	        return React.createElement(
	            "div",
	            null,
	            React.createElement("input", {
	                type: "checkbox",
	                checked: value,
	                onChange: function (ev) {
	                    return onChange(cursor, ev.target.checked);
	                }
	            }),
	            JSON.stringify(value)
	        );
	    };

	    var number = function number(_ref3) {
	        var value = _ref3.value;
	        var cursor = _ref3.cursor;
	        var onChange = _ref3.onChange;

	        return React.createElement("input", {
	            type: "number",
	            value: value,
	            placeholder: value == null ? '(null)' : '',
	            onChange: function (ev) {
	                return onChange(cursor, parseFloat(ev.target.value, 10));
	            }
	        });
	    };

	    var oneOf = function oneOf(_ref4) {
	        var type = _ref4.type;
	        var value = _ref4.value;
	        var cursor = _ref4.cursor;
	        var onChange = _ref4.onChange;

	        // This might look really unnecessary, but we need it because of type
	        // coercion. `ev.target.value` is always going to be a string, but
	        // `option` may not be, e.g. if you have React.PropTypes.oneOf([0, 1]);
	        var optionToValue = {};
	        type.args[0].forEach(function (option) {
	            optionToValue[option] = option;
	        });

	        return React.createElement(
	            "select",
	            {
	                value: value,
	                onChange: function (ev) {
	                    return onChange(cursor, optionToValue[ev.target.value]);
	                }
	            },
	            type.args[0].map(function (option) {
	                return React.createElement(
	                    "option",
	                    { key: option, value: option },
	                    option
	                );
	            })
	        );
	    };

	    var arrayOf = function arrayOf(_ref5) {
	        var name = _ref5.name;
	        var value = _ref5.value;
	        var cursor = _ref5.cursor;
	        var type = _ref5.type;
	        var onChange = _ref5.onChange;
	        var ancestorValid = _ref5.ancestorValid;

	        var arrayVal = value || [];

	        return React.createElement(
	            "div",
	            null,
	            arrayVal.map(function (item, index) {
	                return React.createElement(
	                    "div",
	                    {
	                        className: css(styles.nestedProp, styles.arrayItem),
	                        key: index
	                    },
	                    React.createElement(
	                        "button",
	                        { onClick: function () {
	                                onChange(cursor, arrayVal.slice(0, index).concat(arrayVal.slice(index + 1)));
	                            }
	                        },
	                        "x"
	                    ),
	                    React.createElement(
	                        "div",
	                        { className: css(styles.grow) },
	                        React.createElement(SinglePropEditor, {
	                            name: name + "[" + index + "]",
	                            type: type.args[0],
	                            value: item,
	                            onChange: onChange,
	                            cursor: cursor.concat([index]),
	                            ancestorValid: ancestorValid
	                        })
	                    )
	                );
	            }),
	            React.createElement(
	                "button",
	                {
	                    key: "add",
	                    onClick: function () {
	                        var nextVal = generateRandomValueForType(type.args[0], cursor);
	                        onChange(cursor, arrayVal.concat([nextVal]));
	                    }
	                },
	                "Add item to ",
	                name
	            )
	        );
	    };

	    var shape = function shape(_ref6) {
	        var name = _ref6.name;
	        var value = _ref6.value;
	        var type = _ref6.type;
	        var cursor = _ref6.cursor;
	        var onChange = _ref6.onChange;
	        var ancestorValid = _ref6.ancestorValid;

	        var shape = type.args[0];
	        var objVal = value || {};
	        return React.createElement(
	            "div",
	            null,
	            Object.keys(shape).map(function (childKey) {
	                return React.createElement(
	                    "div",
	                    { className: css(styles.nestedProp), key: childKey },
	                    React.createElement(SinglePropEditor, {
	                        name: name + "." + childKey,
	                        type: shape[childKey],
	                        value: objVal[childKey],
	                        onChange: onChange,
	                        cursor: cursor.concat([childKey]),
	                        ancestorValid: ancestorValid
	                    })
	                );
	            })
	        );
	    };

	    var unknown = function unknown(_ref7) {
	        var value = _ref7.value;
	        var onChange = _ref7.onChange;

	        try {
	            return JSON.stringify(value);
	        } catch (e) {
	            return value.toString();
	        }
	    };

	    var instanceOf = function instanceOf(_ref8) {
	        var value = _ref8.value;

	        return value == null ? '(null)' : value.toString();
	    };

	    var func = function func(_ref9) {
	        var value = _ref9.value;

	        return value == null ? '(null)' : value.toString();
	    };

	    var nullable = function nullable(inputType, props) {
	        var onChange = props.onChange;
	        var value = props.value;
	        var cursor = props.cursor;

	        return React.createElement(
	            "div",
	            { className: css(styles.nullableField) },
	            React.createElement(
	                "div",
	                { className: css(styles.grow) },
	                FIELD_RENDERERS[inputType](props)
	            ),
	            React.createElement(
	                "button",
	                {
	                    onClick: function () {
	                        return onChange(cursor, null);
	                    },
	                    disabled: value == null
	                },
	                "null"
	            )
	        );
	    };

	    return {
	        string: string,
	        node: string,
	        element: string,
	        bool: bool,
	        number: number,
	        oneOf: oneOf,
	        arrayOf: arrayOf,
	        shape: shape,
	        instanceOf: instanceOf,
	        func: func,
	        unknown: unknown,
	        nullable: nullable
	    };
	})();

	var SinglePropEditor = React.createClass({
	    displayName: "SinglePropEditor",

	    propTypes: {
	        // True if the parent prop editor has valid props. Defaults to false.
	        // This default should only be used for the top-level props.
	        ancestorValid: RP.bool.isRequired,

	        // Cursor to the data this binds to in the fixtures.
	        cursor: RP.arrayOf(RP.oneOfType([RP.string.isRequired, RP.number.isRequired]).isRequired).isRequired,

	        // The name of the prop
	        name: RP.string.isRequired,

	        onChange: RP.func.isRequired,

	        // The type of the prop to edit. This will match the values of return
	        // type of inferTypes.
	        type: RP.oneOfType([RP.func.isRequired, RP.shape({
	            type: RP.string.isRequired,
	            required: RP.bool.isRequired,
	            args: RP.array(RP.object.isRequired)
	        }).isRequired]).isRequired,

	        // The current value of this prop.
	        value: RP.any
	    },

	    mixins: [PureRenderMixinWithCursor],

	    getDefaultProps: function getDefaultProps() {
	        return {
	            ancestorValid: false
	        };
	    },

	    render: function render() {
	        var _props = this.props;
	        var name = _props.name;
	        var value = _props.value;
	        var type = _props.type;
	        var ancestorValid = _props.ancestorValid;

	        // TODO(jlfwong): Adding to objectOf
	        // TODO(jlfwong): Drag to re-arrange in arrays

	        var inputType = FIELD_RENDERERS[type.type] ? type.type : 'unknown';

	        // The validity of this field is unimportant if one of the ancestors
	        // validated. This allows us to ignore fields that are invalid when
	        // a parent is null.
	        var valid = ancestorValid || valueSatisfiesType(value, type);

	        var props = _extends({}, this.props, {
	            ancestorValid: valid
	        });

	        var fieldEditor = type.required ? FIELD_RENDERERS[inputType](props) : FIELD_RENDERERS.nullable(inputType, props);

	        return React.createElement(
	            "div",
	            { className: css(styles.singleField, !valid && styles.invalidField)
	            },
	            React.createElement(
	                "span",
	                { className: css(styles.nameLabel) },
	                name
	            ),
	            fieldEditor
	        );
	    }
	});

	var styles = StyleSheet.create({
	    singleField: {
	        borderBottom: '1px dotted grey',
	        position: 'relative',
	        padding: '15px 0 5px 0',
	        textAlign: 'left',
	        background: 'white'
	    },
	    invalidField: {
	        background: 'rgba(255, 0, 0, 0.4)'
	    },
	    nullableField: {
	        display: 'flex',
	        fontFamily: 'monospace'
	    },
	    nameLabel: {
	        position: 'absolute',
	        fontFamily: 'monospace',
	        fontSize: 10,
	        top: 0,
	        left: 0
	    },
	    nestedProp: {
	        marginLeft: 10
	    },
	    arrayItem: {
	        display: 'flex',
	        alignItems: 'flex-start'
	    },
	    grow: {
	        flexGrow: 1
	    },
	    stringInput: {
	        boxSizing: 'border-box',
	        width: '95%'
	    }
	});

	module.exports = SinglePropEditor;

/***/ },
/* 35 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_35__;

/***/ },
/* 36 */
/***/ function(module, exports) {

	// Modified version of shallowEqual from
	// https://github.com/gaearon/react-pure-render/blob/master/src/shallowEqual.js
	// with added support for custom predicates for certain keys
	'use strict';

	var shallowEqual = function shallowEqual(objA, objB) {
	    var customEquality = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	    if (objA === objB) {
	        return true;
	    }

	    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {

	        return false;
	    }

	    var keysA = Object.keys(objA);
	    var keysB = Object.keys(objB);

	    if (keysA.length !== keysB.length) {
	        return false;
	    }

	    // Test for A's keys different from B.
	    var hasOwnProperty = Object.prototype.hasOwnProperty;
	    var bHasOwnProperty = hasOwnProperty.bind(objB);
	    var cEqHasOwnProperty = hasOwnProperty.bind(customEquality);

	    for (var i = 0; i < keysA.length; i++) {
	        var key = keysA[i];

	        if (!bHasOwnProperty(key)) {
	            return false;
	        }

	        if (cEqHasOwnProperty(key)) {
	            if (!customEquality[key](objA[key], objB[key])) {
	                return false;
	            }
	        } else if (objA[key] !== objB[key]) {
	            return false;
	        }
	    }

	    return true;
	};

	/**
	 * A mixin for only updating if props differ shallowly,
	 * except for the cursor, which will be checked for deep equality.
	 */
	var PureRenderMixinWithCursor = {
	    shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
	        var propsEqual = shallowEqual(this.props, nextProps, {
	            cursor: function cursor(a, b) {
	                return a.join(',') === b.join(',');
	            }
	        });

	        if (!propsEqual) {
	            return true;
	        }

	        if (!shallowEqual(this.state, nextState)) {
	            return true;
	        }

	        return false;
	    }
	};

	module.exports = PureRenderMixinWithCursor;

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Redux actions used by sandbox.
	 */

	"use strict";

	var constants = __webpack_require__(38);

	/**
	 * Load the list of all React components available for use in the sandbox.
	 */
	var loadComponentList = function loadComponentList(getComponentList) {
	    return function (dispatch, getState) {
	        dispatch({
	            type: constants.COMPONENT_LIST_WILL_LOAD
	        });

	        getComponentList().then(function (components) {
	            dispatch({
	                type: constants.COMPONENT_LIST_DID_LOAD,
	                components: components
	            });
	        });
	    };
	};

	/**
	 * Select a component to view in the sandbox.
	 */
	var selectComponent = function selectComponent(key, getComponentReference, getFixtureListReference) {

	    return function (dispatch, getState) {
	        dispatch({
	            type: constants.COMPONENT_SELECTED,
	            key: key
	        });

	        getComponentReference(key).then(function (reference) {
	            dispatch({
	                type: constants.COMPONENT_REFERENCE_DID_LOAD,
	                key: key,
	                reference: reference
	            });
	        });

	        getFixtureListReference(key).then(function (fixtures) {
	            dispatch({
	                type: constants.FIXTURES_DID_LOAD,
	                key: key,
	                fixtures: fixtures
	            });
	        });
	    };
	};

	/**
	 * Update the values of a fixture for the currently selected component.
	 */
	var updateFixture = function updateFixture(cursor, newValue) {
	    return {
	        type: constants.UPDATE_FIXTURE,
	        cursor: cursor,
	        newValue: newValue
	    };
	};

	/**
	 * Update the values of a fixture for the currently selected component.
	 */
	var addFixture = function addFixture(props) {
	    return {
	        type: constants.ADD_FIXTURE,
	        props: props
	    };
	};

	module.exports = {
	    loadComponentList: loadComponentList,
	    selectComponent: selectComponent,
	    updateFixture: updateFixture,
	    addFixture: addFixture
	};

/***/ },
/* 38 */
/***/ function(module, exports) {

	/**
	 * Redux constants used by the sandbox.
	 */

	// Automatically make SANDBOX. prefixed string constants out of an object of
	// names.
	"use strict";

	function makeConstants(obj) {
	    var constants = {};

	    Object.keys(obj).forEach(function (k) {
	        constants[k] = "SANDBOX." + k;
	    });

	    return constants;
	}

	module.exports = makeConstants({
	    COMPONENT_LIST_WILL_LOAD: null,
	    COMPONENT_LIST_DID_LOAD: null,
	    COMPONENT_SELECTED: null,
	    COMPONENT_REFERENCE_DID_LOAD: null,
	    FIXTURES_DID_LOAD: null,
	    UPDATE_FIXTURE: null,
	    ADD_FIXTURE: null
	});

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/*eslint-disable no-fallthrough, no-console*/

	/**
	 * Redux store containing state for the sandbox.
	 */

	"use strict";

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _require = __webpack_require__(12);

	var combineReducers = _require.combineReducers;
	var applyMiddleware = _require.applyMiddleware;
	var createStore = _require.createStore;

	var thunkMiddleware = __webpack_require__(40);
	var icepick = __webpack_require__(41);

	var _require2 = __webpack_require__(30);

	var inferTypesForComponent = _require2.inferTypesForComponent;

	var constants = __webpack_require__(38);

	// TODO(jlfwong): Tests

	var componentList = function componentList(state, action) {
	    if (state === undefined) state = null;

	    switch (action.type) {
	        case constants.COMPONENT_LIST_WILL_LOAD:
	            return null;

	        case constants.COMPONENT_LIST_DID_LOAD:
	            return action.components;
	    }
	    return state;
	};

	var selectedComponent = function selectedComponent(state, action) {
	    if (state === undefined) state = null;

	    switch (action.type) {
	        case constants.COMPONENT_SELECTED:
	            return _extends({}, state, {
	                key: action.key,
	                reference: null,
	                fixtures: null,
	                types: null
	            });

	        case constants.COMPONENT_REFERENCE_DID_LOAD:
	            // If a component reference was loaded but we've since switched to
	            // a different component, ignore the load.
	            if (action.key === state.key) {
	                return _extends({}, state, {
	                    reference: action.reference,
	                    types: inferTypesForComponent(action.reference)
	                });
	            }

	        case constants.FIXTURES_DID_LOAD:
	            // If fixtures were loaded but we've since switched to
	            // a different component, ignore the load.
	            if (action.key === state.key) {
	                return _extends({}, state, {
	                    fixtures: action.fixtures
	                });
	            }

	        case constants.UPDATE_FIXTURE:
	            var cursor = action.cursor,
	                newValue = action.newValue;

	            return _extends({}, state, {
	                fixtures: _extends({}, state.fixtures, {
	                    instances: icepick.assocIn(state.fixtures.instances, cursor, newValue)
	                })
	            });

	        case constants.ADD_FIXTURE:
	            var props = action.props;

	            return _extends({}, state, {
	                fixtures: _extends({}, state.fixtures, {
	                    instances: state.fixtures.instances.concat([props])
	                })
	            });
	    }
	    return state;
	};

	// From http://redux.js.org/docs/api/applyMiddleware.html
	function logger(_ref) {
	    var getState = _ref.getState;

	    return function (next) {
	        return function (action) {
	            console.log('will dispatch', action);

	            // Call the next dispatch method in the middleware chain.
	            var returnValue = next(action);

	            console.log('state after dispatch', getState());

	            // This will likely be the action itself, unless
	            // a middleware further in chain changed it.
	            return returnValue;
	        };
	    };
	}

	var store = combineReducers({
	    componentList: componentList,
	    selectedComponent: selectedComponent
	});

	var createSandboxStore = function createSandboxStore() {
	    var includerLogger = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

	    var middleware = includerLogger ? [thunkMiddleware, logger] : [thunkMiddleware];
	    return applyMiddleware.apply(undefined, middleware)(createStore)(store);
	};

	module.exports = createSandboxStore;

/***/ },
/* 40 */
/***/ function(module, exports) {

	'use strict';

	function thunkMiddleware(_ref) {
	  var dispatch = _ref.dispatch;
	  var getState = _ref.getState;

	  return function (next) {
	    return function (action) {
	      return typeof action === 'function' ? action(dispatch, getState) : next(action);
	    };
	  };
	}

	module.exports = thunkMiddleware;

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * This allows you to work with object hierarchies that have been frozen
	 * with Object.freeze().  "get" operations can use the normal JS syntax,
	 * but operations that modify the data will have to return partial copies of
	 * the structure. The portions of the structure that did not change will
	 * === their previous values.
	 *
	 * Inspired by clojure/mori and Immutable.js
	 */

	"use strict";

	var i = exports;

	// we only care about objects or arrays for now
	function weCareAbout(val) {
	  return null !== val &&
	    (Array.isArray(val) ||
	      // This will skip objects created with `new Foo()`
	      // but not objects created with `Object.create(proto)`
	      // The benefit is ignoring DOM elements, which are often
	      // circular.
	      isObjectLike(val));
	}

	function isObjectLike(val) {
	  return typeof val === "object" && val.constructor === Object;
	}

	// for testing
	exports._weCareAbout = weCareAbout;

	function arrayClone(arr) {
	  var index = 0,
	    length = arr.length,
	    result = Array(length);

	  for (; index < length; index += 1) {
	    result[index] = arr[index];
	  }
	  return result;
	}

	function objClone(obj) {
	  var index = 0,
	    keys = Object.keys(obj),
	    length = keys.length,
	    key,
	    result = {};

	  for (; index < length; index += 1) {
	    key = keys[index];
	    result[key] = obj[key];
	  }
	  return result;
	}

	function clone(coll) {
	  if (Array.isArray(coll)) {
	    return arrayClone(coll);
	  } else {
	    return objClone(coll);
	  }
	}

	function freezeIfNeeded(coll) {
	  if (
	      weCareAbout(coll) &&
	      (
	        !Object.isFrozen(coll) &&
	        process.env.NODE_ENV !== "production"
	      )) {
	    return baseFreeze(coll, []);
	  }
	  return coll;
	}

	function _freeze(coll) {
	  if (process.env.NODE_ENV === "production") {
	    return coll;
	  }
	  return Object.freeze(coll);
	}

	function baseFreeze(coll, prevNodes) {
	  if (prevNodes.some(function (node) { return node === coll; })) {
	    throw new Error("object has a reference cycle");
	  }

	  Object.freeze(coll);
	  prevNodes.push(coll);
	  Object.keys(coll).forEach(function (key) {
	    var prop = coll[key];
	    if (weCareAbout(prop)) {
	      baseFreeze(prop, prevNodes);
	    }
	  });
	  prevNodes.pop();

	  return coll;
	}

	/**
	 * recrursively freeze an object and all its child objects
	 * @param  {Object|Array} coll
	 * @return {Object|Array}
	 */
	exports.freeze = function freeze(coll) {
	  if (process.env.NODE_ENV === "production") {
	    return coll;
	  }
	  return baseFreeze(coll, []);
	};

	/**
	 * recursively un-freeze an object, by cloning frozen collections
	 * @param  {[type]} coll [description]
	 * @return {[type]}      [description]
	 */
	exports.thaw = function thaw(coll) {
	  if (weCareAbout(coll) && Object.isFrozen(coll)) {
	    var newColl = clone(coll);
	    Object.keys(newColl).forEach(function (key) {
	      newColl[key] = thaw(newColl[key]);
	    });
	    return newColl;
	  }
	  return coll;
	};

	/**
	 * set a value on an object or array
	 * @param  {Object|Array}  coll
	 * @param  {String|Number} key   Key or index
	 * @param  {Object}        value
	 * @return {Object|Array}        new object hierarchy with modifications
	 */
	exports.assoc = function assoc(coll, key, value) {
	  var newObj = clone(coll);

	  newObj[key] = freezeIfNeeded(value);

	  return _freeze(newObj);

	};

	/**
	 * un-set a value on an object or array
	 * @param  {Object|Array}  coll
	 * @param  {String|Number} key  Key or Index
	 * @return {Object|Array}       New object or array
	 */
	exports.dissoc = function dissoc(coll, key) {
	  var newObj = clone(coll);

	  delete newObj[key];

	  return _freeze(newObj);
	};

	/**
	 * set a value deep in a hierarchical structure
	 * @param  {Object|Array} coll
	 * @param  {Array}        path    A list of keys to traverse
	 * @param  {Object}       value
	 * @return {Object|Array}       new object hierarchy with modifications
	 */
	exports.assocIn = function assocIn(coll, path, value) {
	  var key0 = path[0];
	  if (path.length === 1) {
	    // simplest case is a 1-element array.  Just a simple assoc.
	    return i.assoc(coll, key0, value);
	  } else {
	    // break the problem down.  Assoc this object with the first key
	    // and the result of assocIn with the rest of the keys
	    return i.assoc(coll, key0, assocIn(coll[key0] || {}, path.slice(1), value));
	  }
	};

	/**
	 * get an object from a hierachy based on an array of keys
	 * @param  {Object|Array} coll
	 * @param  {Array}        path    list of keys
	 * @return {Object}       value, or undefined
	 */
	function baseGet(coll, path) {
	  return (path || []).reduce(function (curr, key) {
	    if (!curr) { return; }
	    return curr[key];
	  }, coll);
	}

	exports.getIn = baseGet;

	/**
	 * Update a value in a hierarchy
	 * @param  {Object|Array}   coll
	 * @param  {Array}          path     list of keys
	 * @param  {Function} callback The existing value with be passed to this.
	 *                             Return the new value to set
	 * @return {Object|Array}      new object hierarchy with modifications
	 */
	exports.updateIn = function updateIn(coll, path, callback) {
	  var existingVal = baseGet(coll, path);
	  return i.assocIn(coll, path, callback(existingVal));
	};


	// generate wrappers for the mutative array methods
	["push", "unshift", "pop", "shift", "reverse", "sort"]
	.forEach(function (methodName) {
	  exports[methodName] = function (arr, val) {
	    var newArr = arrayClone(arr);

	    newArr[methodName](val);

	    return _freeze(newArr);
	  };

	  exports[methodName].displayName = "icepick." + methodName;
	});

	// splice is special because it is variadic
	exports.splice = function splice(arr/*, args*/) {
	  var newArr = arrayClone(arr),
	    args = rest(arguments);

	  newArr.splice.apply(newArr, args);

	  return _freeze(newArr);
	};

	// slice is non-mutative
	exports.slice = function slice(arr, arg1, arg2) {
	  var newArr = arr.slice(arg1, arg2);

	  return _freeze(newArr);
	};

	["map", "filter"].forEach(function (methodName) {
	  exports[methodName] = function (fn, arr) {
	    var newArr = arr[methodName](fn);

	    return _freeze(newArr);
	  };

	  exports[methodName].displayName = "icepick." + methodName;
	});

	exports.extend =
	exports.assign = function assign(/*...objs*/) {
	  var newObj = _slice(arguments).reduce(singleAssign, {});

	  return _freeze(newObj);
	};

	function singleAssign(obj1, obj2) {
	  return Object.keys(obj2).reduce(function (obj, key) {
	    obj[key] = freezeIfNeeded(obj2[key]);
	    return obj;
	  }, obj1);
	}

	exports.merge = merge;
	function merge(target, source) {
	  if (target == null || source == null) {
	    return target;
	  }
	  return Object.keys(source).reduce(function (obj, key) {
	    var sourceVal = source[key];
	    var targetVal = obj[key];

	    if (weCareAbout(sourceVal) && weCareAbout(targetVal)) {
	      // if they are both frozen and reference equal, assume they are deep equal
	      if ((
	            (Object.isFrozen(sourceVal) && Object.isFrozen(targetVal)) ||
	            process.env.NODE_ENV === "production"
	          ) &&
	          sourceVal === targetVal) {
	        return obj;
	      }
	      if (Array.isArray(sourceVal)) {
	        return i.assoc(obj, key, sourceVal);
	      }
	      // recursively merge pairs of objects
	      return assocIfDifferent(obj, key, merge(targetVal, sourceVal));
	    }

	    // primitive values, stuff with prototypes
	    return assocIfDifferent(obj, key, sourceVal);
	  }, target);
	}

	function assocIfDifferent(target, key, value) {
	  if (target[key] === value) {
	    return target;
	  }
	  return i.assoc(target, key, value);
	}

	function _slice(array, start) {
	  var begin = start || 0;
	  var len = array.length;
	  len -= begin;
	  len = len < 0 ? 0 : len;
	  var result = new Array(len);
	  for (var i = 0; i < len; i += 1) {
	    result[i] = array[i + begin];
	  }
	  return result;
	}

	exports._slice = _slice;

	function rest(args) {
	  return _slice(args, 1);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ }
/******/ ])
});
;